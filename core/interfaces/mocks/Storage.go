// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	interfaces "core-building-block/core/interfaces"

	mock "github.com/stretchr/testify/mock"

	model "core-building-block/core/model"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CountAccountsByGroupID provides a mock function with given fields: groupID
func (_m *Storage) CountAccountsByGroupID(groupID string) (*int64, error) {
	ret := _m.Called(groupID)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(groupID)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAccountsByParams provides a mock function with given fields: searchParams, appID, orgID
func (_m *Storage) CountAccountsByParams(searchParams map[string]interface{}, appID string, orgID string) (int64, error) {
	ret := _m.Called(searchParams, appID, orgID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, string) (int64, error)); ok {
		return rf(searchParams, appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, string) int64); ok {
		r0 = rf(searchParams, appID, orgID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, string, string) error); ok {
		r1 = rf(searchParams, appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAccountsByRoleID provides a mock function with given fields: roleID
func (_m *Storage) CountAccountsByRoleID(roleID string) (*int64, error) {
	ret := _m.Called(roleID)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(roleID)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountGroupsByRoleID provides a mock function with given fields: roleID
func (_m *Storage) CountGroupsByRoleID(roleID string) (*int64, error) {
	ret := _m.Called(roleID)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(roleID)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlobalConfig provides a mock function with given fields: globalConfig
func (_m *Storage) CreateGlobalConfig(globalConfig *model.GlobalConfig) error {
	ret := _m.Called(globalConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.GlobalConfig) error); ok {
		r0 = rf(globalConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAPIKey provides a mock function with given fields: ID
func (_m *Storage) DeleteAPIKey(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: id
func (_m *Storage) DeleteAccount(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccountAuthType provides a mock function with given fields: item
func (_m *Storage) DeleteAccountAuthType(item model.AccountAuthType) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AccountAuthType) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccountPermissions provides a mock function with given fields: accountID, permissionNames
func (_m *Storage) DeleteAccountPermissions(accountID string, permissionNames []string) error {
	ret := _m.Called(accountID, permissionNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(accountID, permissionNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccountRoles provides a mock function with given fields: accountID, roleIDs
func (_m *Storage) DeleteAccountRoles(accountID string, roleIDs []string) error {
	ret := _m.Called(accountID, roleIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(accountID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAppConfig provides a mock function with given fields: ID
func (_m *Storage) DeleteAppConfig(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAppOrgGroup provides a mock function with given fields: id
func (_m *Storage) DeleteAppOrgGroup(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAppOrgRole provides a mock function with given fields: id
func (_m *Storage) DeleteAppOrgRole(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCredential provides a mock function with given fields: ID
func (_m *Storage) DeleteCredential(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDevice provides a mock function with given fields: id
func (_m *Storage) DeleteDevice(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGlobalConfig provides a mock function with given fields:
func (_m *Storage) DeleteGlobalConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoginSession provides a mock function with given fields: id
func (_m *Storage) DeleteLoginSession(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoginSessionsByAccountAuthTypeID provides a mock function with given fields: id
func (_m *Storage) DeleteLoginSessionsByAccountAuthTypeID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoginSessionsByIDs provides a mock function with given fields: ids
func (_m *Storage) DeleteLoginSessionsByIDs(ids []string) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoginSessionsByIdentifier provides a mock function with given fields: identifier
func (_m *Storage) DeleteLoginSessionsByIdentifier(identifier string) error {
	ret := _m.Called(identifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(identifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMFAExpiredSessions provides a mock function with given fields:
func (_m *Storage) DeleteMFAExpiredSessions() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMFAType provides a mock function with given fields: accountID, identifier, mfaType
func (_m *Storage) DeleteMFAType(accountID string, identifier string, mfaType string) error {
	ret := _m.Called(accountID, identifier, mfaType)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(accountID, identifier, mfaType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePermission provides a mock function with given fields: id
func (_m *Storage) DeletePermission(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceAccount provides a mock function with given fields: accountID, appID, orgID
func (_m *Storage) DeleteServiceAccount(accountID string, appID string, orgID string) error {
	ret := _m.Called(accountID, appID, orgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(accountID, appID, orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceAccountCredential provides a mock function with given fields: accountID, credID
func (_m *Storage) DeleteServiceAccountCredential(accountID string, credID string) error {
	ret := _m.Called(accountID, credID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(accountID, credID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceAccounts provides a mock function with given fields: accountID
func (_m *Storage) DeleteServiceAccounts(accountID string) error {
	ret := _m.Called(accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceAuthorization provides a mock function with given fields: userID, orgID
func (_m *Storage) DeleteServiceAuthorization(userID string, orgID string) error {
	ret := _m.Called(userID, orgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceReg provides a mock function with given fields: serviceID
func (_m *Storage) DeleteServiceReg(serviceID string) error {
	ret := _m.Called(serviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAccount provides a mock function with given fields: appOrgID, authTypeID, accountAuthTypeIdentifier
func (_m *Storage) FindAccount(appOrgID string, authTypeID string, accountAuthTypeIdentifier string) (*model.Account, error) {
	ret := _m.Called(appOrgID, authTypeID, accountAuthTypeIdentifier)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Account, error)); ok {
		return rf(appOrgID, authTypeID, accountAuthTypeIdentifier)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Account); ok {
		r0 = rf(appOrgID, authTypeID, accountAuthTypeIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(appOrgID, authTypeID, accountAuthTypeIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountByAuthTypeID provides a mock function with given fields: id
func (_m *Storage) FindAccountByAuthTypeID(id string) (*model.Account, error) {
	ret := _m.Called(id)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountByID provides a mock function with given fields: id
func (_m *Storage) FindAccountByID(id string) (*model.Account, error) {
	ret := _m.Called(id)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccounts provides a mock function with given fields: limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs
func (_m *Storage) FindAccounts(limit *int, offset *int, appID string, orgID string, accountID *string, firstName *string, lastName *string, authType *string, authTypeIdentifier *string, anonymous *bool, hasPermissions *bool, permissions []string, roleIDs []string, groupIDs []string) ([]model.Account, error) {
	ret := _m.Called(limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs)

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(*int, *int, string, string, *string, *string, *string, *string, *string, *bool, *bool, []string, []string, []string) ([]model.Account, error)); ok {
		return rf(limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs)
	}
	if rf, ok := ret.Get(0).(func(*int, *int, string, string, *string, *string, *string, *string, *string, *bool, *bool, []string, []string, []string) []model.Account); ok {
		r0 = rf(limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*int, *int, string, string, *string, *string, *string, *string, *string, *bool, *bool, []string, []string, []string) error); ok {
		r1 = rf(limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByAccountID provides a mock function with given fields: appID, orgID, accountIDs
func (_m *Storage) FindAccountsByAccountID(appID string, orgID string, accountIDs []string) ([]model.Account, error) {
	ret := _m.Called(appID, orgID, accountIDs)

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) ([]model.Account, error)); ok {
		return rf(appID, orgID, accountIDs)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) []model.Account); ok {
		r0 = rf(appID, orgID, accountIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(appID, orgID, accountIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByParams provides a mock function with given fields: searchParams, appID, orgID, limit, offset, allAccess, approvedKeys
func (_m *Storage) FindAccountsByParams(searchParams map[string]interface{}, appID string, orgID string, limit int, offset int, allAccess bool, approvedKeys []string) ([]map[string]interface{}, error) {
	ret := _m.Called(searchParams, appID, orgID, limit, offset, allAccess, approvedKeys)

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, string, int, int, bool, []string) ([]map[string]interface{}, error)); ok {
		return rf(searchParams, appID, orgID, limit, offset, allAccess, approvedKeys)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, string, int, int, bool, []string) []map[string]interface{}); ok {
		r0 = rf(searchParams, appID, orgID, limit, offset, allAccess, approvedKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, string, string, int, int, bool, []string) error); ok {
		r1 = rf(searchParams, appID, orgID, limit, offset, allAccess, approvedKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByUsername provides a mock function with given fields: appOrg, username
func (_m *Storage) FindAccountsByUsername(appOrg *model.ApplicationOrganization, username string) ([]model.Account, error) {
	ret := _m.Called(appOrg, username)

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ApplicationOrganization, string) ([]model.Account, error)); ok {
		return rf(appOrg, username)
	}
	if rf, ok := ret.Get(0).(func(*model.ApplicationOrganization, string) []model.Account); ok {
		r0 = rf(appOrg, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ApplicationOrganization, string) error); ok {
		r1 = rf(appOrg, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAndUpdateLoginSession provides a mock function with given fields: id
func (_m *Storage) FindAndUpdateLoginSession(id string) (*model.LoginSession, error) {
	ret := _m.Called(id)

	var r0 *model.LoginSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.LoginSession, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.LoginSession); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LoginSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppConfigByID provides a mock function with given fields: ID
func (_m *Storage) FindAppConfigByID(ID string) (*model.ApplicationConfig, error) {
	ret := _m.Called(ID)

	var r0 *model.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ApplicationConfig, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ApplicationConfig); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppConfigByVersion provides a mock function with given fields: appTypeIdentifier, appOrgID, versionNumbers
func (_m *Storage) FindAppConfigByVersion(appTypeIdentifier string, appOrgID *string, versionNumbers model.VersionNumbers) (*model.ApplicationConfig, error) {
	ret := _m.Called(appTypeIdentifier, appOrgID, versionNumbers)

	var r0 *model.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, model.VersionNumbers) (*model.ApplicationConfig, error)); ok {
		return rf(appTypeIdentifier, appOrgID, versionNumbers)
	}
	if rf, ok := ret.Get(0).(func(string, *string, model.VersionNumbers) *model.ApplicationConfig); ok {
		r0 = rf(appTypeIdentifier, appOrgID, versionNumbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, model.VersionNumbers) error); ok {
		r1 = rf(appTypeIdentifier, appOrgID, versionNumbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppConfigs provides a mock function with given fields: appTypeIdentifier, appOrgID, versionNumbers
func (_m *Storage) FindAppConfigs(appTypeIdentifier string, appOrgID *string, versionNumbers *model.VersionNumbers) ([]model.ApplicationConfig, error) {
	ret := _m.Called(appTypeIdentifier, appOrgID, versionNumbers)

	var r0 []model.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, *model.VersionNumbers) ([]model.ApplicationConfig, error)); ok {
		return rf(appTypeIdentifier, appOrgID, versionNumbers)
	}
	if rf, ok := ret.Get(0).(func(string, *string, *model.VersionNumbers) []model.ApplicationConfig); ok {
		r0 = rf(appTypeIdentifier, appOrgID, versionNumbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, *model.VersionNumbers) error); ok {
		r1 = rf(appTypeIdentifier, appOrgID, versionNumbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgGroup provides a mock function with given fields: id, appOrgID
func (_m *Storage) FindAppOrgGroup(id string, appOrgID string) (*model.AppOrgGroup, error) {
	ret := _m.Called(id, appOrgID)

	var r0 *model.AppOrgGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.AppOrgGroup, error)); ok {
		return rf(id, appOrgID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.AppOrgGroup); ok {
		r0 = rf(id, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppOrgGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgGroups provides a mock function with given fields: appOrgID
func (_m *Storage) FindAppOrgGroups(appOrgID string) ([]model.AppOrgGroup, error) {
	ret := _m.Called(appOrgID)

	var r0 []model.AppOrgGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.AppOrgGroup, error)); ok {
		return rf(appOrgID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.AppOrgGroup); ok {
		r0 = rf(appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgGroupsByIDs provides a mock function with given fields: ids, appOrgID
func (_m *Storage) FindAppOrgGroupsByIDs(ids []string, appOrgID string) ([]model.AppOrgGroup, error) {
	ret := _m.Called(ids, appOrgID)

	var r0 []model.AppOrgGroup
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, string) ([]model.AppOrgGroup, error)); ok {
		return rf(ids, appOrgID)
	}
	if rf, ok := ret.Get(0).(func([]string, string) []model.AppOrgGroup); ok {
		r0 = rf(ids, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgGroup)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgRole provides a mock function with given fields: id, appOrgID
func (_m *Storage) FindAppOrgRole(id string, appOrgID string) (*model.AppOrgRole, error) {
	ret := _m.Called(id, appOrgID)

	var r0 *model.AppOrgRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.AppOrgRole, error)); ok {
		return rf(id, appOrgID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.AppOrgRole); ok {
		r0 = rf(id, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppOrgRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgRoles provides a mock function with given fields: appOrgID
func (_m *Storage) FindAppOrgRoles(appOrgID string) ([]model.AppOrgRole, error) {
	ret := _m.Called(appOrgID)

	var r0 []model.AppOrgRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.AppOrgRole, error)); ok {
		return rf(appOrgID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.AppOrgRole); ok {
		r0 = rf(appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgRolesByIDs provides a mock function with given fields: ids, appOrgID
func (_m *Storage) FindAppOrgRolesByIDs(ids []string, appOrgID string) ([]model.AppOrgRole, error) {
	ret := _m.Called(ids, appOrgID)

	var r0 []model.AppOrgRole
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, string) ([]model.AppOrgRole, error)); ok {
		return rf(ids, appOrgID)
	}
	if rf, ok := ret.Get(0).(func([]string, string) []model.AppOrgRole); ok {
		r0 = rf(ids, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgRole)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplication provides a mock function with given fields: ID
func (_m *Storage) FindApplication(ID string) (*model.Application, error) {
	ret := _m.Called(ID)

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Application, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Application); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationOrganization provides a mock function with given fields: appID, orgID
func (_m *Storage) FindApplicationOrganization(appID string, orgID string) (*model.ApplicationOrganization, error) {
	ret := _m.Called(appID, orgID)

	var r0 *model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ApplicationOrganization, error)); ok {
		return rf(appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ApplicationOrganization); ok {
		r0 = rf(appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationOrganizationByID provides a mock function with given fields: ID
func (_m *Storage) FindApplicationOrganizationByID(ID string) (*model.ApplicationOrganization, error) {
	ret := _m.Called(ID)

	var r0 *model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ApplicationOrganization, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ApplicationOrganization); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationOrganizations provides a mock function with given fields: appID, orgID
func (_m *Storage) FindApplicationOrganizations(appID *string, orgID *string) ([]model.ApplicationOrganization, error) {
	ret := _m.Called(appID, orgID)

	var r0 []model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string) ([]model.ApplicationOrganization, error)); ok {
		return rf(appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(*string, *string) []model.ApplicationOrganization); ok {
		r0 = rf(appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string) error); ok {
		r1 = rf(appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationType provides a mock function with given fields: id
func (_m *Storage) FindApplicationType(id string) (*model.ApplicationType, error) {
	ret := _m.Called(id)

	var r0 *model.ApplicationType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ApplicationType, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ApplicationType); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplications provides a mock function with given fields:
func (_m *Storage) FindApplications() ([]model.Application, error) {
	ret := _m.Called()

	var r0 []model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Application, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Application); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationsOrganizations provides a mock function with given fields:
func (_m *Storage) FindApplicationsOrganizations() ([]model.ApplicationOrganization, error) {
	ret := _m.Called()

	var r0 []model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.ApplicationOrganization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.ApplicationOrganization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationsOrganizationsByOrgID provides a mock function with given fields: orgID
func (_m *Storage) FindApplicationsOrganizationsByOrgID(orgID string) ([]model.ApplicationOrganization, error) {
	ret := _m.Called(orgID)

	var r0 []model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.ApplicationOrganization, error)); ok {
		return rf(orgID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.ApplicationOrganization); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAuthType provides a mock function with given fields: codeOrID
func (_m *Storage) FindAuthType(codeOrID string) (*model.AuthType, error) {
	ret := _m.Called(codeOrID)

	var r0 *model.AuthType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AuthType, error)); ok {
		return rf(codeOrID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AuthType); ok {
		r0 = rf(codeOrID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(codeOrID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAuthTypes provides a mock function with given fields:
func (_m *Storage) FindAuthTypes() ([]model.AuthType, error) {
	ret := _m.Called()

	var r0 []model.AuthType
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.AuthType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.AuthType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AuthType)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCredential provides a mock function with given fields: ID
func (_m *Storage) FindCredential(ID string) (*model.Credential, error) {
	ret := _m.Called(ID)

	var r0 *model.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Credential, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Credential); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDevice provides a mock function with given fields: deviceID, accountID
func (_m *Storage) FindDevice(deviceID string, accountID string) (*model.Device, error) {
	ret := _m.Called(deviceID, accountID)

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Device, error)); ok {
		return rf(deviceID, accountID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Device); ok {
		r0 = rf(deviceID, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(deviceID, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLoginSession provides a mock function with given fields: refreshToken
func (_m *Storage) FindLoginSession(refreshToken string) (*model.LoginSession, error) {
	ret := _m.Called(refreshToken)

	var r0 *model.LoginSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.LoginSession, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *model.LoginSession); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LoginSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLoginSessions provides a mock function with given fields: identifier
func (_m *Storage) FindLoginSessions(identifier string) ([]model.LoginSession, error) {
	ret := _m.Called(identifier)

	var r0 []model.LoginSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.LoginSession, error)); ok {
		return rf(identifier)
	}
	if rf, ok := ret.Get(0).(func(string) []model.LoginSession); ok {
		r0 = rf(identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LoginSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLoginSessionsByParams provides a mock function with given fields: appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress
func (_m *Storage) FindLoginSessionsByParams(appID string, orgID string, sessionID *string, identifier *string, accountAuthTypeIdentifier *string, appTypeID *string, appTypeIdentifier *string, anonymous *bool, deviceID *string, ipAddress *string) ([]model.LoginSession, error) {
	ret := _m.Called(appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress)

	var r0 []model.LoginSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *string, *string, *string, *string, *string, *bool, *string, *string) ([]model.LoginSession, error)); ok {
		return rf(appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress)
	}
	if rf, ok := ret.Get(0).(func(string, string, *string, *string, *string, *string, *string, *bool, *string, *string) []model.LoginSession); ok {
		r0 = rf(appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LoginSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *string, *string, *string, *string, *string, *bool, *string, *string) error); ok {
		r1 = rf(appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMFAType provides a mock function with given fields: accountID, identifier, mfaType
func (_m *Storage) FindMFAType(accountID string, identifier string, mfaType string) (*model.MFAType, error) {
	ret := _m.Called(accountID, identifier, mfaType)

	var r0 *model.MFAType
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.MFAType, error)); ok {
		return rf(accountID, identifier, mfaType)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.MFAType); ok {
		r0 = rf(accountID, identifier, mfaType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MFAType)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(accountID, identifier, mfaType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMFATypes provides a mock function with given fields: accountID
func (_m *Storage) FindMFATypes(accountID string) ([]model.MFAType, error) {
	ret := _m.Called(accountID)

	var r0 []model.MFAType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.MFAType, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.MFAType); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MFAType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganization provides a mock function with given fields: id
func (_m *Storage) FindOrganization(id string) (*model.Organization, error) {
	ret := _m.Called(id)

	var r0 *model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Organization, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Organization); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganizations provides a mock function with given fields:
func (_m *Storage) FindOrganizations() ([]model.Organization, error) {
	ret := _m.Called()

	var r0 []model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Organization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Organization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPermissions provides a mock function with given fields: ids
func (_m *Storage) FindPermissions(ids []string) ([]model.Permission, error) {
	ret := _m.Called(ids)

	var r0 []model.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]model.Permission, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []model.Permission); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPermissionsByName provides a mock function with given fields: names
func (_m *Storage) FindPermissionsByName(names []string) ([]model.Permission, error) {
	ret := _m.Called(names)

	var r0 []model.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]model.Permission, error)); ok {
		return rf(names)
	}
	if rf, ok := ret.Get(0).(func([]string) []model.Permission); ok {
		r0 = rf(names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPermissionsByServiceIDs provides a mock function with given fields: serviceIDs
func (_m *Storage) FindPermissionsByServiceIDs(serviceIDs []string) ([]model.Permission, error) {
	ret := _m.Called(serviceIDs)

	var r0 []model.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]model.Permission, error)); ok {
		return rf(serviceIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) []model.Permission); ok {
		r0 = rf(serviceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(serviceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProfiles provides a mock function with given fields: appID, authTypeID, accountAuthTypeIdentifier
func (_m *Storage) FindProfiles(appID string, authTypeID string, accountAuthTypeIdentifier string) ([]model.Profile, error) {
	ret := _m.Called(appID, authTypeID, accountAuthTypeIdentifier)

	var r0 []model.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]model.Profile, error)); ok {
		return rf(appID, authTypeID, accountAuthTypeIdentifier)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []model.Profile); ok {
		r0 = rf(appID, authTypeID, accountAuthTypeIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(appID, authTypeID, accountAuthTypeIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceAccount provides a mock function with given fields: accountID, appID, orgID
func (_m *Storage) FindServiceAccount(accountID string, appID string, orgID string) (*model.ServiceAccount, error) {
	ret := _m.Called(accountID, appID, orgID)

	var r0 *model.ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.ServiceAccount, error)); ok {
		return rf(accountID, appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.ServiceAccount); ok {
		r0 = rf(accountID, appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(accountID, appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceAccounts provides a mock function with given fields: params
func (_m *Storage) FindServiceAccounts(params map[string]interface{}) ([]model.ServiceAccount, error) {
	ret := _m.Called(params)

	var r0 []model.ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]model.ServiceAccount, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []model.ServiceAccount); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceAuthorization provides a mock function with given fields: userID, orgID
func (_m *Storage) FindServiceAuthorization(userID string, orgID string) (*model.ServiceAuthorization, error) {
	ret := _m.Called(userID, orgID)

	var r0 *model.ServiceAuthorization
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ServiceAuthorization, error)); ok {
		return rf(userID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ServiceAuthorization); ok {
		r0 = rf(userID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ServiceAuthorization)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceReg provides a mock function with given fields: serviceID
func (_m *Storage) FindServiceReg(serviceID string) (*model.ServiceRegistration, error) {
	ret := _m.Called(serviceID)

	var r0 *model.ServiceRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ServiceRegistration, error)); ok {
		return rf(serviceID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ServiceRegistration); ok {
		r0 = rf(serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ServiceRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceRegs provides a mock function with given fields: serviceIDs
func (_m *Storage) FindServiceRegs(serviceIDs []string) []model.ServiceRegistration {
	ret := _m.Called(serviceIDs)

	var r0 []model.ServiceRegistration
	if rf, ok := ret.Get(0).(func([]string) []model.ServiceRegistration); ok {
		r0 = rf(serviceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ServiceRegistration)
		}
	}

	return r0
}

// FindSessionsLazy provides a mock function with given fields: appID, orgID
func (_m *Storage) FindSessionsLazy(appID string, orgID string) ([]model.LoginSession, error) {
	ret := _m.Called(appID, orgID)

	var r0 []model.LoginSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]model.LoginSession, error)); ok {
		return rf(appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string) []model.LoginSession); ok {
		r0 = rf(appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LoginSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSystemOrganization provides a mock function with given fields:
func (_m *Storage) FindSystemOrganization() (*model.Organization, error) {
	ret := _m.Called()

	var r0 *model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.Organization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.Organization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalConfig provides a mock function with given fields:
func (_m *Storage) GetGlobalConfig() (*model.GlobalConfig, error) {
	ret := _m.Called()

	var r0 *model.GlobalConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.GlobalConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.GlobalConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GlobalConfig)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAPIKey provides a mock function with given fields: apiKey
func (_m *Storage) InsertAPIKey(apiKey model.APIKey) (*model.APIKey, error) {
	ret := _m.Called(apiKey)

	var r0 *model.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(model.APIKey) (*model.APIKey, error)); ok {
		return rf(apiKey)
	}
	if rf, ok := ret.Get(0).(func(model.APIKey) *model.APIKey); ok {
		r0 = rf(apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(model.APIKey) error); ok {
		r1 = rf(apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccount provides a mock function with given fields: account
func (_m *Storage) InsertAccount(account model.Account) (*model.Account, error) {
	ret := _m.Called(account)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Account) (*model.Account, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(model.Account) *model.Account); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccountAuthType provides a mock function with given fields: item
func (_m *Storage) InsertAccountAuthType(item model.AccountAuthType) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AccountAuthType) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAccountGroups provides a mock function with given fields: accountID, appOrgID, groups
func (_m *Storage) InsertAccountGroups(accountID string, appOrgID string, groups []model.AccountGroup) error {
	ret := _m.Called(accountID, appOrgID, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []model.AccountGroup) error); ok {
		r0 = rf(accountID, appOrgID, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAccountPermissions provides a mock function with given fields: accountID, permissions
func (_m *Storage) InsertAccountPermissions(accountID string, permissions []model.Permission) error {
	ret := _m.Called(accountID, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []model.Permission) error); ok {
		r0 = rf(accountID, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAccountRoles provides a mock function with given fields: accountID, appOrgID, roles
func (_m *Storage) InsertAccountRoles(accountID string, appOrgID string, roles []model.AccountRole) error {
	ret := _m.Called(accountID, appOrgID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []model.AccountRole) error); ok {
		r0 = rf(accountID, appOrgID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAccountsGroup provides a mock function with given fields: group, accountIDs
func (_m *Storage) InsertAccountsGroup(group model.AccountGroup, accountIDs []string) error {
	ret := _m.Called(group, accountIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AccountGroup, []string) error); ok {
		r0 = rf(group, accountIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAppConfig provides a mock function with given fields: item
func (_m *Storage) InsertAppConfig(item model.ApplicationConfig) (*model.ApplicationConfig, error) {
	ret := _m.Called(item)

	var r0 *model.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ApplicationConfig) (*model.ApplicationConfig, error)); ok {
		return rf(item)
	}
	if rf, ok := ret.Get(0).(func(model.ApplicationConfig) *model.ApplicationConfig); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ApplicationConfig) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAppOrgGroup provides a mock function with given fields: item
func (_m *Storage) InsertAppOrgGroup(item model.AppOrgGroup) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AppOrgGroup) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAppOrgRole provides a mock function with given fields: item
func (_m *Storage) InsertAppOrgRole(item model.AppOrgRole) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AppOrgRole) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAppOrgRolePermissions provides a mock function with given fields: roleID, permissionNames
func (_m *Storage) InsertAppOrgRolePermissions(roleID string, permissionNames []model.Permission) error {
	ret := _m.Called(roleID, permissionNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []model.Permission) error); ok {
		r0 = rf(roleID, permissionNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertApplication provides a mock function with given fields: application
func (_m *Storage) InsertApplication(application model.Application) (*model.Application, error) {
	ret := _m.Called(application)

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Application) (*model.Application, error)); ok {
		return rf(application)
	}
	if rf, ok := ret.Get(0).(func(model.Application) *model.Application); ok {
		r0 = rf(application)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Application) error); ok {
		r1 = rf(application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertApplicationOrganization provides a mock function with given fields: applicationOrganization
func (_m *Storage) InsertApplicationOrganization(applicationOrganization model.ApplicationOrganization) (*model.ApplicationOrganization, error) {
	ret := _m.Called(applicationOrganization)

	var r0 *model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ApplicationOrganization) (*model.ApplicationOrganization, error)); ok {
		return rf(applicationOrganization)
	}
	if rf, ok := ret.Get(0).(func(model.ApplicationOrganization) *model.ApplicationOrganization); ok {
		r0 = rf(applicationOrganization)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ApplicationOrganization) error); ok {
		r1 = rf(applicationOrganization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAuthType provides a mock function with given fields: authType
func (_m *Storage) InsertAuthType(authType model.AuthType) (*model.AuthType, error) {
	ret := _m.Called(authType)

	var r0 *model.AuthType
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AuthType) (*model.AuthType, error)); ok {
		return rf(authType)
	}
	if rf, ok := ret.Get(0).(func(model.AuthType) *model.AuthType); ok {
		r0 = rf(authType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthType)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AuthType) error); ok {
		r1 = rf(authType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCredential provides a mock function with given fields: creds
func (_m *Storage) InsertCredential(creds *model.Credential) error {
	ret := _m.Called(creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Credential) error); ok {
		r0 = rf(creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertDevice provides a mock function with given fields: device
func (_m *Storage) InsertDevice(device model.Device) (*model.Device, error) {
	ret := _m.Called(device)

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Device) (*model.Device, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(model.Device) *model.Device); ok {
		r0 = rf(device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Device) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertLoginSession provides a mock function with given fields: session
func (_m *Storage) InsertLoginSession(session model.LoginSession) error {
	ret := _m.Called(session)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.LoginSession) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertMFAType provides a mock function with given fields: mfa, accountID
func (_m *Storage) InsertMFAType(mfa *model.MFAType, accountID string) error {
	ret := _m.Called(mfa, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MFAType, string) error); ok {
		r0 = rf(mfa, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOrganization provides a mock function with given fields: organization
func (_m *Storage) InsertOrganization(organization model.Organization) (*model.Organization, error) {
	ret := _m.Called(organization)

	var r0 *model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Organization) (*model.Organization, error)); ok {
		return rf(organization)
	}
	if rf, ok := ret.Get(0).(func(model.Organization) *model.Organization); ok {
		r0 = rf(organization)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Organization) error); ok {
		r1 = rf(organization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPermission provides a mock function with given fields: item
func (_m *Storage) InsertPermission(item model.Permission) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Permission) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertPermissions provides a mock function with given fields: items
func (_m *Storage) InsertPermissions(items []model.Permission) error {
	ret := _m.Called(items)

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.Permission) error); ok {
		r0 = rf(items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertServiceAccount provides a mock function with given fields: account
func (_m *Storage) InsertServiceAccount(account *model.ServiceAccount) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceAccount) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertServiceAccountCredential provides a mock function with given fields: accountID, creds
func (_m *Storage) InsertServiceAccountCredential(accountID string, creds *model.ServiceAccountCredential) error {
	ret := _m.Called(accountID, creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.ServiceAccountCredential) error); ok {
		r0 = rf(accountID, creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertServiceReg provides a mock function with given fields: reg
func (_m *Storage) InsertServiceReg(reg *model.ServiceRegistration) error {
	ret := _m.Called(reg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceRegistration) error); ok {
		r0 = rf(reg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadAPIKeys provides a mock function with given fields:
func (_m *Storage) LoadAPIKeys() ([]model.APIKey, error) {
	ret := _m.Called()

	var r0 []model.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.APIKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.APIKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadIdentityProviders provides a mock function with given fields:
func (_m *Storage) LoadIdentityProviders() ([]model.IdentityProvider, error) {
	ret := _m.Called()

	var r0 []model.IdentityProvider
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.IdentityProvider, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.IdentityProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.IdentityProvider)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateServiceRegs provides a mock function with given fields:
func (_m *Storage) MigrateServiceRegs() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PerformTransaction provides a mock function with given fields: _a0
func (_m *Storage) PerformTransaction(_a0 func(interfaces.Storage) error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(interfaces.Storage) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterStorageListener provides a mock function with given fields: listener
func (_m *Storage) RegisterStorageListener(listener interfaces.StorageListener) {
	_m.Called(listener)
}

// RemoveAccountsGroup provides a mock function with given fields: groupID, accountIDs
func (_m *Storage) RemoveAccountsGroup(groupID string, accountIDs []string) error {
	ret := _m.Called(groupID, accountIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(groupID, accountIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAccount provides a mock function with given fields: account
func (_m *Storage) SaveAccount(account *model.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveApplication provides a mock function with given fields: application
func (_m *Storage) SaveApplication(application model.Application) error {
	ret := _m.Called(application)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Application) error); ok {
		r0 = rf(application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDevice provides a mock function with given fields: device
func (_m *Storage) SaveDevice(device *model.Device) error {
	ret := _m.Called(device)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveServiceAuthorization provides a mock function with given fields: authorization
func (_m *Storage) SaveServiceAuthorization(authorization *model.ServiceAuthorization) error {
	ret := _m.Called(authorization)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceAuthorization) error); ok {
		r0 = rf(authorization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveServiceReg provides a mock function with given fields: reg, immediateCache
func (_m *Storage) SaveServiceReg(reg *model.ServiceRegistration, immediateCache bool) error {
	ret := _m.Called(reg, immediateCache)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceRegistration, bool) error); ok {
		r0 = rf(reg, immediateCache)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAPIKey provides a mock function with given fields: apiKey
func (_m *Storage) UpdateAPIKey(apiKey model.APIKey) error {
	ret := _m.Called(apiKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.APIKey) error); ok {
		r0 = rf(apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountExternalIDs provides a mock function with given fields: accountID, externalIDs
func (_m *Storage) UpdateAccountExternalIDs(accountID string, externalIDs map[string]string) error {
	ret := _m.Called(accountID, externalIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(accountID, externalIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountGroups provides a mock function with given fields: accountID, groups
func (_m *Storage) UpdateAccountGroups(accountID string, groups []model.AccountGroup) error {
	ret := _m.Called(accountID, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []model.AccountGroup) error); ok {
		r0 = rf(accountID, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountPermissions provides a mock function with given fields: accountID, permissions
func (_m *Storage) UpdateAccountPermissions(accountID string, permissions []model.Permission) error {
	ret := _m.Called(accountID, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []model.Permission) error); ok {
		r0 = rf(accountID, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountPreferences provides a mock function with given fields: accountID, preferences
func (_m *Storage) UpdateAccountPreferences(accountID string, preferences map[string]interface{}) error {
	ret := _m.Called(accountID, preferences)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(accountID, preferences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountRoles provides a mock function with given fields: accountID, roles
func (_m *Storage) UpdateAccountRoles(accountID string, roles []model.AccountRole) error {
	ret := _m.Called(accountID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []model.AccountRole) error); ok {
		r0 = rf(accountID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountScopes provides a mock function with given fields: accountID, scopes
func (_m *Storage) UpdateAccountScopes(accountID string, scopes []string) error {
	ret := _m.Called(accountID, scopes)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(accountID, scopes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountSystemConfigs provides a mock function with given fields: accountID, configs
func (_m *Storage) UpdateAccountSystemConfigs(accountID string, configs map[string]interface{}) error {
	ret := _m.Called(accountID, configs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(accountID, configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountUsageInfo provides a mock function with given fields: accountID, updateLoginTime, updateAccessTokenTime, clientVersion
func (_m *Storage) UpdateAccountUsageInfo(accountID string, updateLoginTime bool, updateAccessTokenTime bool, clientVersion *string) error {
	ret := _m.Called(accountID, updateLoginTime, updateAccessTokenTime, clientVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, bool, *string) error); ok {
		r0 = rf(accountID, updateLoginTime, updateAccessTokenTime, clientVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountUsername provides a mock function with given fields: accountID, username
func (_m *Storage) UpdateAccountUsername(accountID string, username string) error {
	ret := _m.Called(accountID, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(accountID, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAppConfig provides a mock function with given fields: ID, appType, appOrg, version, data
func (_m *Storage) UpdateAppConfig(ID string, appType model.ApplicationType, appOrg *model.ApplicationOrganization, version model.Version, data map[string]interface{}) error {
	ret := _m.Called(ID, appType, appOrg, version, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.ApplicationType, *model.ApplicationOrganization, model.Version, map[string]interface{}) error); ok {
		r0 = rf(ID, appType, appOrg, version, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAppOrgGroup provides a mock function with given fields: item
func (_m *Storage) UpdateAppOrgGroup(item model.AppOrgGroup) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AppOrgGroup) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAppOrgRole provides a mock function with given fields: item
func (_m *Storage) UpdateAppOrgRole(item model.AppOrgRole) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AppOrgRole) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateApplicationOrganization provides a mock function with given fields: applicationOrganization
func (_m *Storage) UpdateApplicationOrganization(applicationOrganization model.ApplicationOrganization) error {
	ret := _m.Called(applicationOrganization)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ApplicationOrganization) error); ok {
		r0 = rf(applicationOrganization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAuthTypes provides a mock function with given fields: ID, code, description, isExternal, isAnonymous, useCredentials, ignoreMFA, params
func (_m *Storage) UpdateAuthTypes(ID string, code string, description string, isExternal bool, isAnonymous bool, useCredentials bool, ignoreMFA bool, params map[string]interface{}) error {
	ret := _m.Called(ID, code, description, isExternal, isAnonymous, useCredentials, ignoreMFA, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, bool, bool, bool, map[string]interface{}) error); ok {
		r0 = rf(ID, code, description, isExternal, isAnonymous, useCredentials, ignoreMFA, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCredential provides a mock function with given fields: creds
func (_m *Storage) UpdateCredential(creds *model.Credential) error {
	ret := _m.Called(creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Credential) error); ok {
		r0 = rf(creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCredentialValue provides a mock function with given fields: ID, value
func (_m *Storage) UpdateCredentialValue(ID string, value map[string]interface{}) error {
	ret := _m.Called(ID, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(ID, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLoginSession provides a mock function with given fields: loginSession
func (_m *Storage) UpdateLoginSession(loginSession model.LoginSession) error {
	ret := _m.Called(loginSession)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.LoginSession) error); ok {
		r0 = rf(loginSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLoginSessionExternalIDs provides a mock function with given fields: accountID, externalIDs
func (_m *Storage) UpdateLoginSessionExternalIDs(accountID string, externalIDs map[string]string) error {
	ret := _m.Called(accountID, externalIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(accountID, externalIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMFAType provides a mock function with given fields: mfa, accountID
func (_m *Storage) UpdateMFAType(mfa *model.MFAType, accountID string) error {
	ret := _m.Called(mfa, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MFAType, string) error); ok {
		r0 = rf(mfa, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrganization provides a mock function with given fields: ID, name, requestType, organizationDomains
func (_m *Storage) UpdateOrganization(ID string, name string, requestType string, organizationDomains []string) error {
	ret := _m.Called(ID, name, requestType, organizationDomains)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(ID, name, requestType, organizationDomains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePermission provides a mock function with given fields: item
func (_m *Storage) UpdatePermission(item model.Permission) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Permission) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: profile
func (_m *Storage) UpdateProfile(profile model.Profile) error {
	ret := _m.Called(profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Profile) error); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceAccount provides a mock function with given fields: account
func (_m *Storage) UpdateServiceAccount(account *model.ServiceAccount) (*model.ServiceAccount, error) {
	ret := _m.Called(account)

	var r0 *model.ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ServiceAccount) (*model.ServiceAccount, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*model.ServiceAccount) *model.ServiceAccount); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ServiceAccount) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceReg provides a mock function with given fields: reg
func (_m *Storage) UpdateServiceReg(reg *model.ServiceRegistration) error {
	ret := _m.Called(reg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceRegistration) error); ok {
		r0 = rf(reg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
