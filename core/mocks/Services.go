// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	logs "github.com/rokwire/logging-library-go/logs"
	mock "github.com/stretchr/testify/mock"

	model "core-building-block/core/model"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// SerDeleteAccount provides a mock function with given fields: id
func (_m *Services) SerDeleteAccount(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SerGetAccount provides a mock function with given fields: accountID
func (_m *Services) SerGetAccount(accountID string) (*model.Account, error) {
	ret := _m.Called(accountID)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(string) *model.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SerGetAuthTest provides a mock function with given fields: l
func (_m *Services) SerGetAuthTest(l *logs.Log) string {
	ret := _m.Called(l)

	var r0 string
	if rf, ok := ret.Get(0).(func(*logs.Log) string); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SerGetCommonTest provides a mock function with given fields: l
func (_m *Services) SerGetCommonTest(l *logs.Log) string {
	ret := _m.Called(l)

	var r0 string
	if rf, ok := ret.Get(0).(func(*logs.Log) string); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SerGetPreferences provides a mock function with given fields: accountID
func (_m *Services) SerGetPreferences(accountID string) (map[string]interface{}, error) {
	ret := _m.Called(accountID)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SerGetProfile provides a mock function with given fields: accountID
func (_m *Services) SerGetProfile(accountID string) (*model.Profile, error) {
	ret := _m.Called(accountID)

	var r0 *model.Profile
	if rf, ok := ret.Get(0).(func(string) *model.Profile); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SerUpdateAccountPreferences provides a mock function with given fields: id, preferences
func (_m *Services) SerUpdateAccountPreferences(id string, preferences map[string]interface{}) error {
	ret := _m.Called(id, preferences)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(id, preferences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SerUpdateProfile provides a mock function with given fields: accountID, profile
func (_m *Services) SerUpdateProfile(accountID string, profile *model.Profile) error {
	ret := _m.Called(accountID, profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.Profile) error); ok {
		r0 = rf(accountID, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
