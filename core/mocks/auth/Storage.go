// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "core-building-block/core/model"

	mock "github.com/stretchr/testify/mock"

	storage "core-building-block/driven/storage"

	time "time"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// DeleteAPIKey provides a mock function with given fields: ID
func (_m *Storage) DeleteAPIKey(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredSessions provides a mock function with given fields: now
func (_m *Storage) DeleteExpiredSessions(now *time.Time) error {
	ret := _m.Called(now)

	var r0 error
	if rf, ok := ret.Get(0).(func(*time.Time) error); ok {
		r0 = rf(now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoginSession provides a mock function with given fields: context, id
func (_m *Storage) DeleteLoginSession(context storage.TransactionContext, id string) error {
	ret := _m.Called(context, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) error); ok {
		r0 = rf(context, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceAuthorization provides a mock function with given fields: userID, orgID
func (_m *Storage) DeleteServiceAuthorization(userID string, orgID string) error {
	ret := _m.Called(userID, orgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceReg provides a mock function with given fields: serviceID
func (_m *Storage) DeleteServiceReg(serviceID string) error {
	ret := _m.Called(serviceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAPIKey provides a mock function with given fields: ID
func (_m *Storage) FindAPIKey(ID string) (*model.APIKey, error) {
	ret := _m.Called(ID)

	var r0 *model.APIKey
	if rf, ok := ret.Get(0).(func(string) *model.APIKey); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.APIKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccount provides a mock function with given fields: appOrgID, authTypeID, accountAuthTypeIdentifier
func (_m *Storage) FindAccount(appOrgID string, authTypeID string, accountAuthTypeIdentifier string) (*model.Account, error) {
	ret := _m.Called(appOrgID, authTypeID, accountAuthTypeIdentifier)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Account); ok {
		r0 = rf(appOrgID, authTypeID, accountAuthTypeIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(appOrgID, authTypeID, accountAuthTypeIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountByAuthTypeID provides a mock function with given fields: context, id
func (_m *Storage) FindAccountByAuthTypeID(context storage.TransactionContext, id string) (*model.Account, error) {
	ret := _m.Called(context, id)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) *model.Account); ok {
		r0 = rf(context, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string) error); ok {
		r1 = rf(context, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountByID provides a mock function with given fields: context, storageid
func (_m *Storage) FindAccountByID(context storage.TransactionContext, storageid string) (*model.Account, error) {
	ret := _m.Called(context, storageid)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) *model.Account); ok {
		r0 = rf(context, storageid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string) error); ok {
		r1 = rf(context, storageid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgGroups provides a mock function with given fields: ids, appOrgID
func (_m *Storage) FindAppOrgGroups(ids []string, appOrgID string) ([]model.AppOrgGroup, error) {
	ret := _m.Called(ids, appOrgID)

	var r0 []model.AppOrgGroup
	if rf, ok := ret.Get(0).(func([]string, string) []model.AppOrgGroup); ok {
		r0 = rf(ids, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgRoles provides a mock function with given fields: ids, appOrgID
func (_m *Storage) FindAppOrgRoles(ids []string, appOrgID string) ([]model.AppOrgRole, error) {
	ret := _m.Called(ids, appOrgID)

	var r0 []model.AppOrgRole
	if rf, ok := ret.Get(0).(func([]string, string) []model.AppOrgRole); ok {
		r0 = rf(ids, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(ids, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationAPIKeys provides a mock function with given fields: appID
func (_m *Storage) FindApplicationAPIKeys(appID string) ([]model.APIKey, error) {
	ret := _m.Called(appID)

	var r0 []model.APIKey
	if rf, ok := ret.Get(0).(func(string) []model.APIKey); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.APIKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationOrganizations provides a mock function with given fields: appID, orgID
func (_m *Storage) FindApplicationOrganizations(appID string, orgID string) (*model.ApplicationOrganization, error) {
	ret := _m.Called(appID, orgID)

	var r0 *model.ApplicationOrganization
	if rf, ok := ret.Get(0).(func(string, string) *model.ApplicationOrganization); ok {
		r0 = rf(appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationOrganization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationTypeByIdentifier provides a mock function with given fields: identifier
func (_m *Storage) FindApplicationTypeByIdentifier(identifier string) (*model.ApplicationType, error) {
	ret := _m.Called(identifier)

	var r0 *model.ApplicationType
	if rf, ok := ret.Get(0).(func(string) *model.ApplicationType); ok {
		r0 = rf(identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAuthType provides a mock function with given fields: codeOrID
func (_m *Storage) FindAuthType(codeOrID string) (*model.AuthType, error) {
	ret := _m.Called(codeOrID)

	var r0 *model.AuthType
	if rf, ok := ret.Get(0).(func(string) *model.AuthType); ok {
		r0 = rf(codeOrID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(codeOrID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCredential provides a mock function with given fields: ID
func (_m *Storage) FindCredential(ID string) (*model.Credential, error) {
	ret := _m.Called(ID)

	var r0 *model.Credential
	if rf, ok := ret.Get(0).(func(string) *model.Credential); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDevice provides a mock function with given fields: ID
func (_m *Storage) FindDevice(ID string) (*model.Device, error) {
	ret := _m.Called(ID)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(string) *model.Device); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLoginSession provides a mock function with given fields: refreshToken
func (_m *Storage) FindLoginSession(refreshToken string) (*model.LoginSession, error) {
	ret := _m.Called(refreshToken)

	var r0 *model.LoginSession
	if rf, ok := ret.Get(0).(func(string) *model.LoginSession); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LoginSession)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLoginSessions provides a mock function with given fields: context, identifier
func (_m *Storage) FindLoginSessions(context storage.TransactionContext, identifier string) ([]model.LoginSession, error) {
	ret := _m.Called(context, identifier)

	var r0 []model.LoginSession
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) []model.LoginSession); ok {
		r0 = rf(context, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LoginSession)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string) error); ok {
		r1 = rf(context, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganization provides a mock function with given fields: id
func (_m *Storage) FindOrganization(id string) (*model.Organization, error) {
	ret := _m.Called(id)

	var r0 *model.Organization
	if rf, ok := ret.Get(0).(func(string) *model.Organization); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceAuthorization provides a mock function with given fields: userID, orgID
func (_m *Storage) FindServiceAuthorization(userID string, orgID string) (*model.ServiceAuthorization, error) {
	ret := _m.Called(userID, orgID)

	var r0 *model.ServiceAuthorization
	if rf, ok := ret.Get(0).(func(string, string) *model.ServiceAuthorization); ok {
		r0 = rf(userID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ServiceAuthorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceReg provides a mock function with given fields: serviceID
func (_m *Storage) FindServiceReg(serviceID string) (*model.ServiceReg, error) {
	ret := _m.Called(serviceID)

	var r0 *model.ServiceReg
	if rf, ok := ret.Get(0).(func(string) *model.ServiceReg); ok {
		r0 = rf(serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ServiceReg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindServiceRegs provides a mock function with given fields: serviceIDs
func (_m *Storage) FindServiceRegs(serviceIDs []string) ([]model.ServiceReg, error) {
	ret := _m.Called(serviceIDs)

	var r0 []model.ServiceReg
	if rf, ok := ret.Get(0).(func([]string) []model.ServiceReg); ok {
		r0 = rf(serviceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ServiceReg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(serviceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAPIKey provides a mock function with given fields: apiKey
func (_m *Storage) InsertAPIKey(apiKey model.APIKey) (*model.APIKey, error) {
	ret := _m.Called(apiKey)

	var r0 *model.APIKey
	if rf, ok := ret.Get(0).(func(model.APIKey) *model.APIKey); ok {
		r0 = rf(apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.APIKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.APIKey) error); ok {
		r1 = rf(apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccount provides a mock function with given fields: account
func (_m *Storage) InsertAccount(account model.Account) (*model.Account, error) {
	ret := _m.Called(account)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(model.Account) *model.Account); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCredential provides a mock function with given fields: creds
func (_m *Storage) InsertCredential(creds *model.Credential) error {
	ret := _m.Called(creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Credential) error); ok {
		r0 = rf(creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertDevice provides a mock function with given fields: device
func (_m *Storage) InsertDevice(device model.Device) (*model.Device, error) {
	ret := _m.Called(device)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(model.Device) *model.Device); ok {
		r0 = rf(device)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Device) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertLoginSession provides a mock function with given fields: context, session
func (_m *Storage) InsertLoginSession(context storage.TransactionContext, session model.LoginSession) error {
	ret := _m.Called(context, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.LoginSession) error); ok {
		r0 = rf(context, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertServiceReg provides a mock function with given fields: reg
func (_m *Storage) InsertServiceReg(reg *model.ServiceReg) error {
	ret := _m.Called(reg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceReg) error); ok {
		r0 = rf(reg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadAPIKeys provides a mock function with given fields:
func (_m *Storage) LoadAPIKeys() ([]model.APIKey, error) {
	ret := _m.Called()

	var r0 []model.APIKey
	if rf, ok := ret.Get(0).(func() []model.APIKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.APIKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadApplicationsOrganizations provides a mock function with given fields:
func (_m *Storage) LoadApplicationsOrganizations() ([]model.ApplicationOrganization, error) {
	ret := _m.Called()

	var r0 []model.ApplicationOrganization
	if rf, ok := ret.Get(0).(func() []model.ApplicationOrganization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplicationOrganization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAuthTypes provides a mock function with given fields:
func (_m *Storage) LoadAuthTypes() ([]model.AuthType, error) {
	ret := _m.Called()

	var r0 []model.AuthType
	if rf, ok := ret.Get(0).(func() []model.AuthType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AuthType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadIdentityProviders provides a mock function with given fields:
func (_m *Storage) LoadIdentityProviders() ([]model.IdentityProvider, error) {
	ret := _m.Called()

	var r0 []model.IdentityProvider
	if rf, ok := ret.Get(0).(func() []model.IdentityProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.IdentityProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformTransaction provides a mock function with given fields: _a0
func (_m *Storage) PerformTransaction(_a0 func(storage.TransactionContext) error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(storage.TransactionContext) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterStorageListener provides a mock function with given fields: storageListener
func (_m *Storage) RegisterStorageListener(storageListener storage.Listener) {
	_m.Called(storageListener)
}

// SaveAccount provides a mock function with given fields: context, account
func (_m *Storage) SaveAccount(context storage.TransactionContext, account *model.Account) error {
	ret := _m.Called(context, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, *model.Account) error); ok {
		r0 = rf(context, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveServiceAuthorization provides a mock function with given fields: authorization
func (_m *Storage) SaveServiceAuthorization(authorization *model.ServiceAuthorization) error {
	ret := _m.Called(authorization)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceAuthorization) error); ok {
		r0 = rf(authorization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveServiceReg provides a mock function with given fields: reg
func (_m *Storage) SaveServiceReg(reg *model.ServiceReg) error {
	ret := _m.Called(reg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceReg) error); ok {
		r0 = rf(reg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAPIKey provides a mock function with given fields: apiKey
func (_m *Storage) UpdateAPIKey(apiKey model.APIKey) error {
	ret := _m.Called(apiKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.APIKey) error); ok {
		r0 = rf(apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountGroups provides a mock function with given fields: accountID, groups
func (_m *Storage) UpdateAccountGroups(accountID string, groups []model.AccountGroup) error {
	ret := _m.Called(accountID, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []model.AccountGroup) error); ok {
		r0 = rf(accountID, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountRoles provides a mock function with given fields: accountID, roles
func (_m *Storage) UpdateAccountRoles(accountID string, roles []model.AccountRole) error {
	ret := _m.Called(accountID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []model.AccountRole) error); ok {
		r0 = rf(accountID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCredential provides a mock function with given fields: creds
func (_m *Storage) UpdateCredential(creds *model.Credential) error {
	ret := _m.Called(creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Credential) error); ok {
		r0 = rf(creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCredentialValue provides a mock function with given fields: ID, value
func (_m *Storage) UpdateCredentialValue(ID string, value map[string]interface{}) error {
	ret := _m.Called(ID, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(ID, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLoginSession provides a mock function with given fields: loginSession
func (_m *Storage) UpdateLoginSession(loginSession model.LoginSession) error {
	ret := _m.Called(loginSession)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.LoginSession) error); ok {
		r0 = rf(loginSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceReg provides a mock function with given fields: reg
func (_m *Storage) UpdateServiceReg(reg *model.ServiceReg) error {
	ret := _m.Called(reg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ServiceReg) error); ok {
		r0 = rf(reg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
