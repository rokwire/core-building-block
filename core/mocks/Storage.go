// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	model "core-building-block/core/model"

	mock "github.com/stretchr/testify/mock"

	storage "core-building-block/driven/storage"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CountAccountsByGroupID provides a mock function with given fields: groupID
func (_m *Storage) CountAccountsByGroupID(groupID string) (*int64, error) {
	ret := _m.Called(groupID)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(groupID)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAccountsByParams provides a mock function with given fields: searchParams, appID, orgID
func (_m *Storage) CountAccountsByParams(searchParams map[string]interface{}, appID string, orgID string) (int64, error) {
	ret := _m.Called(searchParams, appID, orgID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, string) (int64, error)); ok {
		return rf(searchParams, appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, string) int64); ok {
		r0 = rf(searchParams, appID, orgID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, string, string) error); ok {
		r1 = rf(searchParams, appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAccountsByRoleID provides a mock function with given fields: roleID
func (_m *Storage) CountAccountsByRoleID(roleID string) (*int64, error) {
	ret := _m.Called(roleID)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(roleID)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountGroupsByRoleID provides a mock function with given fields: roleID
func (_m *Storage) CountGroupsByRoleID(roleID string) (*int64, error) {
	ret := _m.Called(roleID)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(roleID)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountPermissions provides a mock function with given fields: context, accountID, permissionNames
func (_m *Storage) DeleteAccountPermissions(context storage.TransactionContext, accountID string, permissionNames []string) error {
	ret := _m.Called(context, accountID, permissionNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, []string) error); ok {
		r0 = rf(context, accountID, permissionNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccountRoles provides a mock function with given fields: context, accountID, roleIDs
func (_m *Storage) DeleteAccountRoles(context storage.TransactionContext, accountID string, roleIDs []string) error {
	ret := _m.Called(context, accountID, roleIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, []string) error); ok {
		r0 = rf(context, accountID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAppConfig provides a mock function with given fields: ID
func (_m *Storage) DeleteAppConfig(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAppOrgGroup provides a mock function with given fields: id
func (_m *Storage) DeleteAppOrgGroup(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAppOrgRole provides a mock function with given fields: id
func (_m *Storage) DeleteAppOrgRole(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteConfig provides a mock function with given fields: id
func (_m *Storage) DeleteConfig(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDevice provides a mock function with given fields: context, id
func (_m *Storage) DeleteDevice(context storage.TransactionContext, id string) error {
	ret := _m.Called(context, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) error); ok {
		r0 = rf(context, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFollow provides a mock function with given fields: context, appID, orgID, followingID, followerID
func (_m *Storage) DeleteFollow(context storage.TransactionContext, appID string, orgID string, followingID string, followerID string) error {
	ret := _m.Called(context, appID, orgID, followingID, followerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string, string, string) error); ok {
		r0 = rf(context, appID, orgID, followingID, followerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoginSessionByID provides a mock function with given fields: context, id
func (_m *Storage) DeleteLoginSessionByID(context storage.TransactionContext, id string) error {
	ret := _m.Called(context, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) error); ok {
		r0 = rf(context, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoginSessionsByIdentifier provides a mock function with given fields: context, identifier
func (_m *Storage) DeleteLoginSessionsByIdentifier(context storage.TransactionContext, identifier string) error {
	ret := _m.Called(context, identifier)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) error); ok {
		r0 = rf(context, identifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePermission provides a mock function with given fields: id
func (_m *Storage) DeletePermission(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAccountByID provides a mock function with given fields: context, id
func (_m *Storage) FindAccountByID(context storage.TransactionContext, id string) (*model.Account, error) {
	ret := _m.Called(context, id)

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) (*model.Account, error)); ok {
		return rf(context, id)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) *model.Account); ok {
		r0 = rf(context, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string) error); ok {
		r1 = rf(context, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccounts provides a mock function with given fields: context, limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs
func (_m *Storage) FindAccounts(context storage.TransactionContext, limit *int, offset *int, appID string, orgID string, accountID *string, firstName *string, lastName *string, authType *string, authTypeIdentifier *string, anonymous *bool, hasPermissions *bool, permissions []string, roleIDs []string, groupIDs []string) ([]model.Account, error) {
	ret := _m.Called(context, limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs)

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, *int, *int, string, string, *string, *string, *string, *string, *string, *bool, *bool, []string, []string, []string) ([]model.Account, error)); ok {
		return rf(context, limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, *int, *int, string, string, *string, *string, *string, *string, *string, *bool, *bool, []string, []string, []string) []model.Account); ok {
		r0 = rf(context, limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, *int, *int, string, string, *string, *string, *string, *string, *string, *bool, *bool, []string, []string, []string) error); ok {
		r1 = rf(context, limit, offset, appID, orgID, accountID, firstName, lastName, authType, authTypeIdentifier, anonymous, hasPermissions, permissions, roleIDs, groupIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByAccountID provides a mock function with given fields: context, appID, orgID, accountIDs
func (_m *Storage) FindAccountsByAccountID(context storage.TransactionContext, appID string, orgID string, accountIDs []string) ([]model.Account, error) {
	ret := _m.Called(context, appID, orgID, accountIDs)

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string, []string) ([]model.Account, error)); ok {
		return rf(context, appID, orgID, accountIDs)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string, []string) []model.Account); ok {
		r0 = rf(context, appID, orgID, accountIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string, string, []string) error); ok {
		r1 = rf(context, appID, orgID, accountIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByParams provides a mock function with given fields: searchParams, appID, orgID, limit, offset, allAccess, approvedKeys
func (_m *Storage) FindAccountsByParams(searchParams map[string]interface{}, appID string, orgID string, limit int, offset int, allAccess bool, approvedKeys []string) ([]map[string]interface{}, error) {
	ret := _m.Called(searchParams, appID, orgID, limit, offset, allAccess, approvedKeys)

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, string, int, int, bool, []string) ([]map[string]interface{}, error)); ok {
		return rf(searchParams, appID, orgID, limit, offset, allAccess, approvedKeys)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string, string, int, int, bool, []string) []map[string]interface{}); ok {
		r0 = rf(searchParams, appID, orgID, limit, offset, allAccess, approvedKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, string, string, int, int, bool, []string) error); ok {
		r1 = rf(searchParams, appID, orgID, limit, offset, allAccess, approvedKeys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByUsername provides a mock function with given fields: context, appOrg, username
func (_m *Storage) FindAccountsByUsername(context storage.TransactionContext, appOrg *model.ApplicationOrganization, username string) ([]model.Account, error) {
	ret := _m.Called(context, appOrg, username)

	var r0 []model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, *model.ApplicationOrganization, string) ([]model.Account, error)); ok {
		return rf(context, appOrg, username)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, *model.ApplicationOrganization, string) []model.Account); ok {
		r0 = rf(context, appOrg, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, *model.ApplicationOrganization, string) error); ok {
		r1 = rf(context, appOrg, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppConfigByID provides a mock function with given fields: ID
func (_m *Storage) FindAppConfigByID(ID string) (*model.ApplicationConfig, error) {
	ret := _m.Called(ID)

	var r0 *model.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ApplicationConfig, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ApplicationConfig); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppConfigByVersion provides a mock function with given fields: appTypeIdentifier, appOrgID, versionNumbers
func (_m *Storage) FindAppConfigByVersion(appTypeIdentifier string, appOrgID *string, versionNumbers model.VersionNumbers) (*model.ApplicationConfig, error) {
	ret := _m.Called(appTypeIdentifier, appOrgID, versionNumbers)

	var r0 *model.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, model.VersionNumbers) (*model.ApplicationConfig, error)); ok {
		return rf(appTypeIdentifier, appOrgID, versionNumbers)
	}
	if rf, ok := ret.Get(0).(func(string, *string, model.VersionNumbers) *model.ApplicationConfig); ok {
		r0 = rf(appTypeIdentifier, appOrgID, versionNumbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, model.VersionNumbers) error); ok {
		r1 = rf(appTypeIdentifier, appOrgID, versionNumbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppConfigs provides a mock function with given fields: appTypeIdentifier, appOrgID, versionNumbers
func (_m *Storage) FindAppConfigs(appTypeIdentifier string, appOrgID *string, versionNumbers *model.VersionNumbers) ([]model.ApplicationConfig, error) {
	ret := _m.Called(appTypeIdentifier, appOrgID, versionNumbers)

	var r0 []model.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, *model.VersionNumbers) ([]model.ApplicationConfig, error)); ok {
		return rf(appTypeIdentifier, appOrgID, versionNumbers)
	}
	if rf, ok := ret.Get(0).(func(string, *string, *model.VersionNumbers) []model.ApplicationConfig); ok {
		r0 = rf(appTypeIdentifier, appOrgID, versionNumbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, *model.VersionNumbers) error); ok {
		r1 = rf(appTypeIdentifier, appOrgID, versionNumbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgGroup provides a mock function with given fields: context, id, appOrgID
func (_m *Storage) FindAppOrgGroup(context storage.TransactionContext, id string, appOrgID string) (*model.AppOrgGroup, error) {
	ret := _m.Called(context, id, appOrgID)

	var r0 *model.AppOrgGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string) (*model.AppOrgGroup, error)); ok {
		return rf(context, id, appOrgID)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string) *model.AppOrgGroup); ok {
		r0 = rf(context, id, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppOrgGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string, string) error); ok {
		r1 = rf(context, id, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgGroups provides a mock function with given fields: appOrgID
func (_m *Storage) FindAppOrgGroups(appOrgID string) ([]model.AppOrgGroup, error) {
	ret := _m.Called(appOrgID)

	var r0 []model.AppOrgGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.AppOrgGroup, error)); ok {
		return rf(appOrgID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.AppOrgGroup); ok {
		r0 = rf(appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgGroupsByIDs provides a mock function with given fields: context, ids, appOrgID
func (_m *Storage) FindAppOrgGroupsByIDs(context storage.TransactionContext, ids []string, appOrgID string) ([]model.AppOrgGroup, error) {
	ret := _m.Called(context, ids, appOrgID)

	var r0 []model.AppOrgGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, []string, string) ([]model.AppOrgGroup, error)); ok {
		return rf(context, ids, appOrgID)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, []string, string) []model.AppOrgGroup); ok {
		r0 = rf(context, ids, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, []string, string) error); ok {
		r1 = rf(context, ids, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgRole provides a mock function with given fields: context, id, appOrgID
func (_m *Storage) FindAppOrgRole(context storage.TransactionContext, id string, appOrgID string) (*model.AppOrgRole, error) {
	ret := _m.Called(context, id, appOrgID)

	var r0 *model.AppOrgRole
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string) (*model.AppOrgRole, error)); ok {
		return rf(context, id, appOrgID)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string) *model.AppOrgRole); ok {
		r0 = rf(context, id, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppOrgRole)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string, string) error); ok {
		r1 = rf(context, id, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgRoles provides a mock function with given fields: appOrgID
func (_m *Storage) FindAppOrgRoles(appOrgID string) ([]model.AppOrgRole, error) {
	ret := _m.Called(appOrgID)

	var r0 []model.AppOrgRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.AppOrgRole, error)); ok {
		return rf(appOrgID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.AppOrgRole); ok {
		r0 = rf(appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppOrgRolesByIDs provides a mock function with given fields: context, ids, appOrgID
func (_m *Storage) FindAppOrgRolesByIDs(context storage.TransactionContext, ids []string, appOrgID string) ([]model.AppOrgRole, error) {
	ret := _m.Called(context, ids, appOrgID)

	var r0 []model.AppOrgRole
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, []string, string) ([]model.AppOrgRole, error)); ok {
		return rf(context, ids, appOrgID)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, []string, string) []model.AppOrgRole); ok {
		r0 = rf(context, ids, appOrgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgRole)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, []string, string) error); ok {
		r1 = rf(context, ids, appOrgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplication provides a mock function with given fields: context, ID
func (_m *Storage) FindApplication(context storage.TransactionContext, ID string) (*model.Application, error) {
	ret := _m.Called(context, ID)

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) (*model.Application, error)); ok {
		return rf(context, ID)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string) *model.Application); ok {
		r0 = rf(context, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string) error); ok {
		r1 = rf(context, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationOrganization provides a mock function with given fields: appID, orgID
func (_m *Storage) FindApplicationOrganization(appID string, orgID string) (*model.ApplicationOrganization, error) {
	ret := _m.Called(appID, orgID)

	var r0 *model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ApplicationOrganization, error)); ok {
		return rf(appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ApplicationOrganization); ok {
		r0 = rf(appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationOrganizationByID provides a mock function with given fields: ID
func (_m *Storage) FindApplicationOrganizationByID(ID string) (*model.ApplicationOrganization, error) {
	ret := _m.Called(ID)

	var r0 *model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ApplicationOrganization, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ApplicationOrganization); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationOrganizations provides a mock function with given fields: appID, orgID
func (_m *Storage) FindApplicationOrganizations(appID *string, orgID *string) ([]model.ApplicationOrganization, error) {
	ret := _m.Called(appID, orgID)

	var r0 []model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string) ([]model.ApplicationOrganization, error)); ok {
		return rf(appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(*string, *string) []model.ApplicationOrganization); ok {
		r0 = rf(appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string) error); ok {
		r1 = rf(appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationType provides a mock function with given fields: id
func (_m *Storage) FindApplicationType(id string) (*model.ApplicationType, error) {
	ret := _m.Called(id)

	var r0 *model.ApplicationType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ApplicationType, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ApplicationType); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplications provides a mock function with given fields:
func (_m *Storage) FindApplications() ([]model.Application, error) {
	ret := _m.Called()

	var r0 []model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Application, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Application); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationsOrganizationsByOrgID provides a mock function with given fields: orgID
func (_m *Storage) FindApplicationsOrganizationsByOrgID(orgID string) ([]model.ApplicationOrganization, error) {
	ret := _m.Called(orgID)

	var r0 []model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.ApplicationOrganization, error)); ok {
		return rf(orgID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.ApplicationOrganization); ok {
		r0 = rf(orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAuthType provides a mock function with given fields: codeOrID
func (_m *Storage) FindAuthType(codeOrID string) (*model.AuthType, error) {
	ret := _m.Called(codeOrID)

	var r0 *model.AuthType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AuthType, error)); ok {
		return rf(codeOrID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AuthType); ok {
		r0 = rf(codeOrID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(codeOrID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAuthTypes provides a mock function with given fields:
func (_m *Storage) FindAuthTypes() ([]model.AuthType, error) {
	ret := _m.Called()

	var r0 []model.AuthType
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.AuthType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.AuthType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AuthType)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindConfig provides a mock function with given fields: configType, appID, orgID
func (_m *Storage) FindConfig(configType string, appID string, orgID string) (*model.Config, error) {
	ret := _m.Called(configType, appID, orgID)

	var r0 *model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Config, error)); ok {
		return rf(configType, appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Config); ok {
		r0 = rf(configType, appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(configType, appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindConfigByID provides a mock function with given fields: id
func (_m *Storage) FindConfigByID(id string) (*model.Config, error) {
	ret := _m.Called(id)

	var r0 *model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Config, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Config); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindConfigs provides a mock function with given fields: configType
func (_m *Storage) FindConfigs(configType *string) ([]model.Config, error) {
	ret := _m.Called(configType)

	var r0 []model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]model.Config, error)); ok {
		return rf(configType)
	}
	if rf, ok := ret.Get(0).(func(*string) []model.Config); ok {
		r0 = rf(configType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(configType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLoginSessionsByParams provides a mock function with given fields: appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress
func (_m *Storage) FindLoginSessionsByParams(appID string, orgID string, sessionID *string, identifier *string, accountAuthTypeIdentifier *string, appTypeID *string, appTypeIdentifier *string, anonymous *bool, deviceID *string, ipAddress *string) ([]model.LoginSession, error) {
	ret := _m.Called(appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress)

	var r0 []model.LoginSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *string, *string, *string, *string, *string, *bool, *string, *string) ([]model.LoginSession, error)); ok {
		return rf(appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress)
	}
	if rf, ok := ret.Get(0).(func(string, string, *string, *string, *string, *string, *string, *bool, *string, *string) []model.LoginSession); ok {
		r0 = rf(appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LoginSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *string, *string, *string, *string, *string, *bool, *string, *string) error); ok {
		r1 = rf(appID, orgID, sessionID, identifier, accountAuthTypeIdentifier, appTypeID, appTypeIdentifier, anonymous, deviceID, ipAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganization provides a mock function with given fields: id
func (_m *Storage) FindOrganization(id string) (*model.Organization, error) {
	ret := _m.Called(id)

	var r0 *model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Organization, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Organization); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganizations provides a mock function with given fields:
func (_m *Storage) FindOrganizations() ([]model.Organization, error) {
	ret := _m.Called()

	var r0 []model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Organization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Organization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPermissionsByName provides a mock function with given fields: context, names
func (_m *Storage) FindPermissionsByName(context storage.TransactionContext, names []string) ([]model.Permission, error) {
	ret := _m.Called(context, names)

	var r0 []model.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, []string) ([]model.Permission, error)); ok {
		return rf(context, names)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, []string) []model.Permission); ok {
		r0 = rf(context, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, []string) error); ok {
		r1 = rf(context, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPermissionsByServiceIDs provides a mock function with given fields: serviceIDs
func (_m *Storage) FindPermissionsByServiceIDs(serviceIDs []string) ([]model.Permission, error) {
	ret := _m.Called(serviceIDs)

	var r0 []model.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]model.Permission, error)); ok {
		return rf(serviceIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) []model.Permission); ok {
		r0 = rf(serviceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(serviceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPublicAccounts provides a mock function with given fields: context, appID, orgID, limit, offset, search, firstName, lastName, username, followingID, followerID, userID
func (_m *Storage) FindPublicAccounts(context storage.TransactionContext, appID string, orgID string, limit *int, offset *int, search *string, firstName *string, lastName *string, username *string, followingID *string, followerID *string, userID string) ([]model.PublicAccount, error) {
	ret := _m.Called(context, appID, orgID, limit, offset, search, firstName, lastName, username, followingID, followerID, userID)

	var r0 []model.PublicAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string, *int, *int, *string, *string, *string, *string, *string, *string, string) ([]model.PublicAccount, error)); ok {
		return rf(context, appID, orgID, limit, offset, search, firstName, lastName, username, followingID, followerID, userID)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string, *int, *int, *string, *string, *string, *string, *string, *string, string) []model.PublicAccount); ok {
		r0 = rf(context, appID, orgID, limit, offset, search, firstName, lastName, username, followingID, followerID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PublicAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, string, string, *int, *int, *string, *string, *string, *string, *string, *string, string) error); ok {
		r1 = rf(context, appID, orgID, limit, offset, search, firstName, lastName, username, followingID, followerID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSystemOrganization provides a mock function with given fields:
func (_m *Storage) FindSystemOrganization() (*model.Organization, error) {
	ret := _m.Called()

	var r0 *model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.Organization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.Organization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAPIKey provides a mock function with given fields: context, apiKey
func (_m *Storage) InsertAPIKey(context storage.TransactionContext, apiKey model.APIKey) (*model.APIKey, error) {
	ret := _m.Called(context, apiKey)

	var r0 *model.APIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.APIKey) (*model.APIKey, error)); ok {
		return rf(context, apiKey)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.APIKey) *model.APIKey); ok {
		r0 = rf(context, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.APIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, model.APIKey) error); ok {
		r1 = rf(context, apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccountPermissions provides a mock function with given fields: context, accountID, permissions
func (_m *Storage) InsertAccountPermissions(context storage.TransactionContext, accountID string, permissions []model.Permission) error {
	ret := _m.Called(context, accountID, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, []model.Permission) error); ok {
		r0 = rf(context, accountID, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAccountRoles provides a mock function with given fields: context, accountID, appOrgID, roles
func (_m *Storage) InsertAccountRoles(context storage.TransactionContext, accountID string, appOrgID string, roles []model.AccountRole) error {
	ret := _m.Called(context, accountID, appOrgID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string, []model.AccountRole) error); ok {
		r0 = rf(context, accountID, appOrgID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAccountsGroup provides a mock function with given fields: context, group, accountIDs
func (_m *Storage) InsertAccountsGroup(context storage.TransactionContext, group model.AccountGroup, accountIDs []string) error {
	ret := _m.Called(context, group, accountIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.AccountGroup, []string) error); ok {
		r0 = rf(context, group, accountIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAppConfig provides a mock function with given fields: item
func (_m *Storage) InsertAppConfig(item model.ApplicationConfig) (*model.ApplicationConfig, error) {
	ret := _m.Called(item)

	var r0 *model.ApplicationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ApplicationConfig) (*model.ApplicationConfig, error)); ok {
		return rf(item)
	}
	if rf, ok := ret.Get(0).(func(model.ApplicationConfig) *model.ApplicationConfig); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ApplicationConfig) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAppOrgGroup provides a mock function with given fields: context, item
func (_m *Storage) InsertAppOrgGroup(context storage.TransactionContext, item model.AppOrgGroup) error {
	ret := _m.Called(context, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.AppOrgGroup) error); ok {
		r0 = rf(context, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAppOrgRole provides a mock function with given fields: context, item
func (_m *Storage) InsertAppOrgRole(context storage.TransactionContext, item model.AppOrgRole) error {
	ret := _m.Called(context, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.AppOrgRole) error); ok {
		r0 = rf(context, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAppOrgRolePermissions provides a mock function with given fields: context, roleID, permissionNames
func (_m *Storage) InsertAppOrgRolePermissions(context storage.TransactionContext, roleID string, permissionNames []model.Permission) error {
	ret := _m.Called(context, roleID, permissionNames)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, []model.Permission) error); ok {
		r0 = rf(context, roleID, permissionNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertApplication provides a mock function with given fields: context, application
func (_m *Storage) InsertApplication(context storage.TransactionContext, application model.Application) (*model.Application, error) {
	ret := _m.Called(context, application)

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.Application) (*model.Application, error)); ok {
		return rf(context, application)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.Application) *model.Application); ok {
		r0 = rf(context, application)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, model.Application) error); ok {
		r1 = rf(context, application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertApplicationOrganization provides a mock function with given fields: context, applicationOrganization
func (_m *Storage) InsertApplicationOrganization(context storage.TransactionContext, applicationOrganization model.ApplicationOrganization) (*model.ApplicationOrganization, error) {
	ret := _m.Called(context, applicationOrganization)

	var r0 *model.ApplicationOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.ApplicationOrganization) (*model.ApplicationOrganization, error)); ok {
		return rf(context, applicationOrganization)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.ApplicationOrganization) *model.ApplicationOrganization); ok {
		r0 = rf(context, applicationOrganization)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, model.ApplicationOrganization) error); ok {
		r1 = rf(context, applicationOrganization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAuthType provides a mock function with given fields: context, authType
func (_m *Storage) InsertAuthType(context storage.TransactionContext, authType model.AuthType) (*model.AuthType, error) {
	ret := _m.Called(context, authType)

	var r0 *model.AuthType
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.AuthType) (*model.AuthType, error)); ok {
		return rf(context, authType)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.AuthType) *model.AuthType); ok {
		r0 = rf(context, authType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthType)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, model.AuthType) error); ok {
		r1 = rf(context, authType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertConfig provides a mock function with given fields: config
func (_m *Storage) InsertConfig(config model.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertFollow provides a mock function with given fields: context, follow
func (_m *Storage) InsertFollow(context storage.TransactionContext, follow model.Follow) error {
	ret := _m.Called(context, follow)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.Follow) error); ok {
		r0 = rf(context, follow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOrganization provides a mock function with given fields: context, organization
func (_m *Storage) InsertOrganization(context storage.TransactionContext, organization model.Organization) (*model.Organization, error) {
	ret := _m.Called(context, organization)

	var r0 *model.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.Organization) (*model.Organization, error)); ok {
		return rf(context, organization)
	}
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.Organization) *model.Organization); ok {
		r0 = rf(context, organization)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.TransactionContext, model.Organization) error); ok {
		r1 = rf(context, organization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPermission provides a mock function with given fields: context, item
func (_m *Storage) InsertPermission(context storage.TransactionContext, item model.Permission) error {
	ret := _m.Called(context, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.Permission) error); ok {
		r0 = rf(context, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertPermissions provides a mock function with given fields: context, items
func (_m *Storage) InsertPermissions(context storage.TransactionContext, items []model.Permission) error {
	ret := _m.Called(context, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, []model.Permission) error); ok {
		r0 = rf(context, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PerformTransaction provides a mock function with given fields: _a0
func (_m *Storage) PerformTransaction(_a0 func(storage.TransactionContext) error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(storage.TransactionContext) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterStorageListener provides a mock function with given fields: storageListener
func (_m *Storage) RegisterStorageListener(storageListener storage.Listener) {
	_m.Called(storageListener)
}

// RemoveAccountsGroup provides a mock function with given fields: context, groupID, accountIDs
func (_m *Storage) RemoveAccountsGroup(context storage.TransactionContext, groupID string, accountIDs []string) error {
	ret := _m.Called(context, groupID, accountIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, []string) error); ok {
		r0 = rf(context, groupID, accountIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveApplication provides a mock function with given fields: context, application
func (_m *Storage) SaveApplication(context storage.TransactionContext, application model.Application) error {
	ret := _m.Called(context, application)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.Application) error); ok {
		r0 = rf(context, application)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDevice provides a mock function with given fields: context, device
func (_m *Storage) SaveDevice(context storage.TransactionContext, device *model.Device) error {
	ret := _m.Called(context, device)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, *model.Device) error); ok {
		r0 = rf(context, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountPreferences provides a mock function with given fields: context, accountID, preferences
func (_m *Storage) UpdateAccountPreferences(context storage.TransactionContext, accountID string, preferences map[string]interface{}) error {
	ret := _m.Called(context, accountID, preferences)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, map[string]interface{}) error); ok {
		r0 = rf(context, accountID, preferences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountPrivacy provides a mock function with given fields: context, accountID, privacy
func (_m *Storage) UpdateAccountPrivacy(context storage.TransactionContext, accountID string, privacy model.Privacy) error {
	ret := _m.Called(context, accountID, privacy)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, model.Privacy) error); ok {
		r0 = rf(context, accountID, privacy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountProfile provides a mock function with given fields: context, profile
func (_m *Storage) UpdateAccountProfile(context storage.TransactionContext, profile model.Profile) error {
	ret := _m.Called(context, profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.Profile) error); ok {
		r0 = rf(context, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountSecrets provides a mock function with given fields: context, accountID, secrets
func (_m *Storage) UpdateAccountSecrets(context storage.TransactionContext, accountID string, secrets map[string]interface{}) error {
	ret := _m.Called(context, accountID, secrets)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, map[string]interface{}) error); ok {
		r0 = rf(context, accountID, secrets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountSystemConfigs provides a mock function with given fields: context, accountID, configs
func (_m *Storage) UpdateAccountSystemConfigs(context storage.TransactionContext, accountID string, configs map[string]interface{}) error {
	ret := _m.Called(context, accountID, configs)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, map[string]interface{}) error); ok {
		r0 = rf(context, accountID, configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountUsername provides a mock function with given fields: context, accountID, username
func (_m *Storage) UpdateAccountUsername(context storage.TransactionContext, accountID string, username string) error {
	ret := _m.Called(context, accountID, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string) error); ok {
		r0 = rf(context, accountID, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountVerified provides a mock function with given fields: context, accountID, appID, orgID, verified
func (_m *Storage) UpdateAccountVerified(context storage.TransactionContext, accountID string, appID string, orgID string, verified bool) error {
	ret := _m.Called(context, accountID, appID, orgID, verified)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, string, string, string, bool) error); ok {
		r0 = rf(context, accountID, appID, orgID, verified)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAppConfig provides a mock function with given fields: ID, appType, appOrg, version, data
func (_m *Storage) UpdateAppConfig(ID string, appType model.ApplicationType, appOrg *model.ApplicationOrganization, version model.Version, data map[string]interface{}) error {
	ret := _m.Called(ID, appType, appOrg, version, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.ApplicationType, *model.ApplicationOrganization, model.Version, map[string]interface{}) error); ok {
		r0 = rf(ID, appType, appOrg, version, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAppOrgGroup provides a mock function with given fields: context, item
func (_m *Storage) UpdateAppOrgGroup(context storage.TransactionContext, item model.AppOrgGroup) error {
	ret := _m.Called(context, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.AppOrgGroup) error); ok {
		r0 = rf(context, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAppOrgRole provides a mock function with given fields: context, item
func (_m *Storage) UpdateAppOrgRole(context storage.TransactionContext, item model.AppOrgRole) error {
	ret := _m.Called(context, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.AppOrgRole) error); ok {
		r0 = rf(context, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateApplicationOrganization provides a mock function with given fields: context, applicationOrganization
func (_m *Storage) UpdateApplicationOrganization(context storage.TransactionContext, applicationOrganization model.ApplicationOrganization) error {
	ret := _m.Called(context, applicationOrganization)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, model.ApplicationOrganization) error); ok {
		r0 = rf(context, applicationOrganization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAuthTypes provides a mock function with given fields: ID, code, description, isExternal, isAnonymous, useCredentials, ignoreMFA, params
func (_m *Storage) UpdateAuthTypes(ID string, code string, description string, isExternal bool, isAnonymous bool, useCredentials bool, ignoreMFA bool, params map[string]interface{}) error {
	ret := _m.Called(ID, code, description, isExternal, isAnonymous, useCredentials, ignoreMFA, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, bool, bool, bool, map[string]interface{}) error); ok {
		r0 = rf(ID, code, description, isExternal, isAnonymous, useCredentials, ignoreMFA, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfig provides a mock function with given fields: config
func (_m *Storage) UpdateConfig(config model.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrganization provides a mock function with given fields: ID, name, requestType, organizationDomains
func (_m *Storage) UpdateOrganization(ID string, name string, requestType string, organizationDomains []string) error {
	ret := _m.Called(ID, name, requestType, organizationDomains)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(ID, name, requestType, organizationDomains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePermission provides a mock function with given fields: item
func (_m *Storage) UpdatePermission(item model.Permission) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Permission) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
