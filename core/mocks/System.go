// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "core-building-block/core/model"

	mock "github.com/stretchr/testify/mock"
)

// System is an autogenerated mock type for the System type
type System struct {
	mock.Mock
}

// SysCreateAppOrgRole provides a mock function with given fields: name, appID, description, permissionNames
func (_m *System) SysCreateAppOrgRole(name string, appID string, description string, permissionNames []string) (*model.AppOrgRole, error) {
	ret := _m.Called(name, appID, description, permissionNames)

	var r0 *model.AppOrgRole
	if rf, ok := ret.Get(0).(func(string, string, string, []string) *model.AppOrgRole); ok {
		r0 = rf(name, appID, description, permissionNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppOrgRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []string) error); ok {
		r1 = rf(name, appID, description, permissionNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysCreateApplication provides a mock function with given fields: name, multiTenant, requiresOwnUsers, maxLoginSessionDuration, identifier, nameInType, versions
func (_m *System) SysCreateApplication(name string, multiTenant bool, requiresOwnUsers bool, maxLoginSessionDuration *int, identifier string, nameInType string, versions []string) (*model.Application, error) {
	ret := _m.Called(name, multiTenant, requiresOwnUsers, maxLoginSessionDuration, identifier, nameInType, versions)

	var r0 *model.Application
	if rf, ok := ret.Get(0).(func(string, bool, bool, *int, string, string, []string) *model.Application); ok {
		r0 = rf(name, multiTenant, requiresOwnUsers, maxLoginSessionDuration, identifier, nameInType, versions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool, *int, string, string, []string) error); ok {
		r1 = rf(name, multiTenant, requiresOwnUsers, maxLoginSessionDuration, identifier, nameInType, versions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysCreateGlobalConfig provides a mock function with given fields: setting
func (_m *System) SysCreateGlobalConfig(setting string) (*model.GlobalConfig, error) {
	ret := _m.Called(setting)

	var r0 *model.GlobalConfig
	if rf, ok := ret.Get(0).(func(string) *model.GlobalConfig); ok {
		r0 = rf(setting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GlobalConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(setting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysCreateOrganization provides a mock function with given fields: name, requestType, organizationDomains
func (_m *System) SysCreateOrganization(name string, requestType string, organizationDomains []string) (*model.Organization, error) {
	ret := _m.Called(name, requestType, organizationDomains)

	var r0 *model.Organization
	if rf, ok := ret.Get(0).(func(string, string, []string) *model.Organization); ok {
		r0 = rf(name, requestType, organizationDomains)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(name, requestType, organizationDomains)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysCreatePermission provides a mock function with given fields: name, serviceID, assigners
func (_m *System) SysCreatePermission(name string, serviceID string, assigners *[]string) (*model.Permission, error) {
	ret := _m.Called(name, serviceID, assigners)

	var r0 *model.Permission
	if rf, ok := ret.Get(0).(func(string, string, *[]string) *model.Permission); ok {
		r0 = rf(name, serviceID, assigners)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *[]string) error); ok {
		r1 = rf(name, serviceID, assigners)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysGetApplication provides a mock function with given fields: ID
func (_m *System) SysGetApplication(ID string) (*model.Application, error) {
	ret := _m.Called(ID)

	var r0 *model.Application
	if rf, ok := ret.Get(0).(func(string) *model.Application); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysGetApplications provides a mock function with given fields:
func (_m *System) SysGetApplications() ([]model.Application, error) {
	ret := _m.Called()

	var r0 []model.Application
	if rf, ok := ret.Get(0).(func() []model.Application); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysGetGlobalConfig provides a mock function with given fields:
func (_m *System) SysGetGlobalConfig() (*model.GlobalConfig, error) {
	ret := _m.Called()

	var r0 *model.GlobalConfig
	if rf, ok := ret.Get(0).(func() *model.GlobalConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GlobalConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysGetOrganization provides a mock function with given fields: ID
func (_m *System) SysGetOrganization(ID string) (*model.Organization, error) {
	ret := _m.Called(ID)

	var r0 *model.Organization
	if rf, ok := ret.Get(0).(func(string) *model.Organization); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysGetOrganizations provides a mock function with given fields:
func (_m *System) SysGetOrganizations() ([]model.Organization, error) {
	ret := _m.Called()

	var r0 []model.Organization
	if rf, ok := ret.Get(0).(func() []model.Organization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SysGrantAccountPermissions provides a mock function with given fields: accountID, permissionNames, assignerPermissions
func (_m *System) SysGrantAccountPermissions(accountID string, permissionNames []string, assignerPermissions []string) error {
	ret := _m.Called(accountID, permissionNames, assignerPermissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, []string) error); ok {
		r0 = rf(accountID, permissionNames, assignerPermissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SysGrantAccountRoles provides a mock function with given fields: accountID, appID, roleIDs
func (_m *System) SysGrantAccountRoles(accountID string, appID string, roleIDs []string) error {
	ret := _m.Called(accountID, appID, roleIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(accountID, appID, roleIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SysUpdateGlobalConfig provides a mock function with given fields: setting
func (_m *System) SysUpdateGlobalConfig(setting string) error {
	ret := _m.Called(setting)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(setting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SysUpdateOrganization provides a mock function with given fields: ID, name, requestType, organizationDomains
func (_m *System) SysUpdateOrganization(ID string, name string, requestType string, organizationDomains []string) error {
	ret := _m.Called(ID, name, requestType, organizationDomains)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(ID, name, requestType, organizationDomains)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SysUpdatePermission provides a mock function with given fields: name, serviceID, assigners
func (_m *System) SysUpdatePermission(name string, serviceID *string, assigners *[]string) (*model.Permission, error) {
	ret := _m.Called(name, serviceID, assigners)

	var r0 *model.Permission
	if rf, ok := ret.Get(0).(func(string, *string, *[]string) *model.Permission); ok {
		r0 = rf(name, serviceID, assigners)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *string, *[]string) error); ok {
		r1 = rf(name, serviceID, assigners)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
