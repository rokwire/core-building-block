// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// PhoneVerifier is an autogenerated mock type for the PhoneVerifier type
type PhoneVerifier struct {
	mock.Mock
}

// CheckVerification provides a mock function with given fields: phone, data
func (_m *PhoneVerifier) CheckVerification(phone string, data url.Values) error {
	ret := _m.Called(phone, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, url.Values) error); ok {
		r0 = rf(phone, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Identifier provides a mock function with given fields:
func (_m *PhoneVerifier) Identifier() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StartVerification provides a mock function with given fields: phone, data
func (_m *PhoneVerifier) StartVerification(phone string, data url.Values) error {
	ret := _m.Called(phone, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, url.Values) error); ok {
		r0 = rf(phone, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPhoneVerifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewPhoneVerifier creates a new instance of PhoneVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPhoneVerifier(t mockConstructorTestingTNewPhoneVerifier) *PhoneVerifier {
	mock := &PhoneVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
