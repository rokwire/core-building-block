// Package Def provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package Def

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for OrganizationType.
const (
	OrganizationTypeHuge OrganizationType = "huge"

	OrganizationTypeLarge OrganizationType = "large"

	OrganizationTypeMedium OrganizationType = "medium"

	OrganizationTypeMicro OrganizationType = "micro"

	OrganizationTypeSmall OrganizationType = "small"
)

// Organization defines model for Organization.
type Organization struct {
	Config           *OrganizationConfig `json:"config,omitempty"`
	Id               string              `json:"id"`
	LoginTypes       *[]string           `json:"login-types,omitempty"`
	Name             string              `json:"name"`
	RequiresOwnLogin *bool               `json:"requires-own-login,omitempty"`
	Type             OrganizationType    `json:"type"`
}

// OrganizationType defines model for Organization.Type.
type OrganizationType string

// OrganizationConfig defines model for OrganizationConfig.
type OrganizationConfig struct {

	// organization domains
	Domains *[]string `json:"domains,omitempty"`

	// organization config id
	Id *string `json:"id,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// TODO
	// (GET /core/admin/organizations/{id})
	GetCoreAdminOrganizationsId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCoreAdminOrganizationsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoreAdminOrganizationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCoreAdminOrganizationsId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/core/admin/organizations/:id", wrapper.GetCoreAdminOrganizationsId)

}
