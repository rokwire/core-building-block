openapi: 3.0.3
info:
  title: Rokwire Core Building Block API
  description: Core Building Block API Documentation
  version: 1.0.0
servers:
  - url: 'https://api.rokwire.illinois.edu/core'
    description: Production server
  - url: 'https://api-test.rokwire.illinois.edu/core'
    description: Test server
  - url: 'https://api-dev.rokwire.illinois.edu/core'
    description: Development server
  - url: 'http://localhost'
    description: Local server
tags:
  - name: Services
    description: End users applications APIs.
  - name: Admin
    description: Administration applications APIs.
  - name: Enc
    description: APIs consumed by the Encryption building block.
  - name: BBs
    description: APIs consumed by the platform building blocks.
  - name: Third-Party Services
    description: APIs consumed by third-party services.
paths:
  /services/auth/login:
    post:
      tags:
        - Services
      summary: Login
      description: |
        Login using credentials to retrieve access token, refresh token, and user data
      requestBody:
        description: |
          User credential details and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_login_Request'
            examples:
              email:
                summary: Email login
                value: |
                  {
                    "auth_type": "email",
                    "app_id": "edu.illinois.rokwire.safercommunity",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "creds": {
                      "email": "test@test.com", 
                      "password": "test12345"
                    }
                  }
              phone:
                summary: Phone login
                value: |
                  {
                    "auth_type": "phone",
                    "app_id": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "creds": {
                      "phone": "+12223334444", 
                      "code": "123456"
                    }
                  }
              illinois_oidc:
                summary: Illinois OIDC login
                value: |
                  {
                    "auth_type": "illinois_oidc",
                    "app_id": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "creds": "https://redirect.example.com?code=ai324uith8gSEefesEguorgwsf43",
                    "params": {
                      "redirect_uri": "https://redirect.example.com",
                      "pkce_verifier": "w4iuhfq0u43hfq38ghn3gnSFSFiqp3ugnpugnqiprgUGNPINfsdoirpgia"
                    }
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_login_Response'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/refresh:
    post:
      tags:
        - Services
      summary: Refresh
      description: |
        Refresh access token using a refresh token
      requestBody:
        description: |
          Refresh token
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_refresh_Response'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/login-url:
    post:
      tags:
        - Services
      summary: Get SSO login url
      description: |
        Retrieve a pre-formatted SSO login URL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_login-url_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_login-url_Response'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/authorize-service:
    post:
      tags:
        - Services
      summary: Authorize service
      description: |
        Authorize a third-party service and get a scoped access token that can be used to access its APIs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_authorize-service_Request'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_authorize-service_Response'
              examples:
                authorized:
                  summary: Service authorized
                  value: |
                    {
                      "access_token": "string",
                      "token_type": "Bearer",
                      "approved_scopes": [
                        "string"
                      ]
                    }
                unauthorized:
                  summary: Service unauthorized
                  value: |
                    {
                      "service_reg": {
                        "service_id": "string",
                        "host": "string",
                        "pub_key": {
                          "key_pem": "string",
                          "alg": "string"
                        },
                        "name": "string",
                        "description": "string",
                        "info_url": "string",
                        "logo_url": "string",
                        "scopes": [
                          {
                            "scope": "string",
                            "required": true,
                            "explanation": "string"
                          }
                        ],
                        "first_party": true
                      }
                    }
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/service-regs:
    get:
      tags:
        - Services
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/test:
    get:
      tags:
        - Services
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /admin/global-config:
    get:
      tags:
        - Admin
      summary: Get global config
      description: |
        Gives the system global config
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfig'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Create global config
      description: |
        Creates the system global config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Admin
      summary: Update global config
      description: |
        Updates the system global config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/admin/organizations/{id}':
    put:
      tags:
        - Admin
      summary: Update organization
      description: |
        Updates organization
      parameters:
        - name: id
          in: path
          description: ID of the organization that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: update one organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    get:
      tags:
        - Admin
      summary: Get organization
      description: |
        Gets organization
      parameters:
        - name: id
          in: path
          description: ID of the organization
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal error
  /admin/organizations:
    get:
      tags:
        - Admin
      summary: Get organizations
      description: |
        Gets organizations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Create organization
      description: |
        Creates organization
      requestBody:
        description: creates one organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/service-regs:
    get:
      tags:
        - Admin
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Register service
      description: |
        Creates a new service registration

        The "service_id" of the registration must not match an existing registration  
      requestBody:
        description: service registration record to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReg'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Admin
      summary: Update service registration
      description: |
        Update an existing service registration

        The "service_id" of the registration must match an existing registration
      requestBody:
        description: Service registration record update to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReg'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - Admin
      summary: Deregister service
      description: |
        Deletes an existing service registration record
      parameters:
        - name: id
          in: query
          description: The service ID of the registration to delete
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/admin/applications/{id}':
    get:
      tags:
        - Admin
      summary: Get application
      description: |
        Gets application
      parameters:
        - name: id
          in: path
          description: ID of the application
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal error
  /admin/applications:
    get:
      tags:
        - Admin
      summary: Get applications
      description: |
        Gets applications
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Create application
      description: |
        Creates application
      requestBody:
        description: creates one application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /enc/test:
    get:
      tags:
        - Enc
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /bbs/test:
    get:
      tags:
        - BBs
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /bbs/service-regs:
    get:
      tags:
        - BBs
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /tps/service-regs:
    get:
      tags:
        - Third-Party Services
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /tps/auth-keys:
    get:
      tags:
        - Third-Party Services
      summary: Get auth public key
      description: |
        Returns auth public key in JWKS format
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /version:
    get:
      summary: Get service version
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: v1.1.0
  /.well-known/openid-configuration:
    get:
      summary: OpenID Connect Discovery
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OidcDiscovery'
components:
  schemas:
    GlobalConfig:
      required:
        - setting
      type: object
      properties:
        setting:
          type: string
    Application:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationFields'
        types:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationType'
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationOrganization'
    ApplicationFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        multi_tenant:
          type: boolean
        requires_own_users:
          type: boolean
    ApplicationType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationTypeFields'
        application:
          $ref: '#/components/schemas/Application'
    ApplicationTypeFields:
      required:
        - id
        - identifier
      type: object
      properties:
        id:
          type: string
        identifier:
          type: string
        name:
          type: string
        versions:
          type: array
          items:
            type: string
    ApplicationOrganization:
      type: object
      properties:
        id:
          type: string
        TODO:
          type: string
    ApplicationPermission:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationPermissionFields'
        application:
          $ref: '#/components/schemas/Application'
    ApplicationPermissionFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ApplicationRole:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationRoleFields'
        application:
          $ref: '#/components/schemas/Application'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationPermission'
    ApplicationRoleFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ApplicationGroup:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationGroupFields'
        application:
          $ref: '#/components/schemas/Application'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationPermission'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRole'
    ApplicationGroupFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Organization:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/OrganizationFields'
        config:
          $ref: '#/components/schemas/OrganizationConfig'
    OrganizationFields:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
    OrganizationConfig:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/OrganizationConfigFields'
    OrganizationConfigFields:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: organization config id
        domains:
          type: array
          description: organization domains
          items:
            type: string
    AuthType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AuthTypeFields'
    AuthTypeFields:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
        description:
          type: string
        is_external:
          type: boolean
        params:
          type: object
          additionalProperties: true
    Credential:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/CredentialFields'
        accounts_auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthType'
    CredentialFields:
      type: object
      properties:
        id:
          type: string
        value:
          type: object
    ServiceReg:
      required:
        - service_id
        - host
        - name
        - description
        - first_party
      type: object
      description: Full service registration record
      properties:
        service_id:
          type: string
        host:
          type: string
        pub_key:
          $ref: '#/components/schemas/PubKey'
        name:
          type: string
        description:
          type: string
        info_url:
          type: string
        logo_url:
          type: string
        scopes:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ServiceScope'
        first_party:
          type: boolean
    AuthServiceReg:
      required:
        - service_id
        - host
      type: object
      description: Service registration record used for auth
      properties:
        service_id:
          type: string
        host:
          type: string
        pub_key:
          $ref: '#/components/schemas/PubKey'
    PubKey:
      required:
        - key_pem
        - alg
      type: object
      properties:
        key_pem:
          type: string
        alg:
          type: string
    ServiceScope:
      required:
        - scope
        - required
      type: object
      properties:
        scope:
          type: string
        required:
          type: boolean
        explanation:
          description: Explanation displayed to users for why this scope is requested/required
          type: string
    JWK:
      required:
        - kty
        - use
        - alg
        - kid
        - 'n'
        - e
      type: object
      description: JSON Web Key (JWK)
      properties:
        kty:
          type: string
          description: The "kty" (key type) parameter identifies the cryptographic algorithm family used with the key
          enum:
            - RSA
        use:
          type: string
          description: The "use" (public key use) parameter identifies the intended use of the public key
          enum:
            - sig
        alg:
          type: string
          description: The "alg" (algorithm) parameter identifies the algorithm intended for use with the key
          enum:
            - RS256
        kid:
          type: string
          description: The "kid" (key ID) parameter is used to match a specific key
        'n':
          type: string
          description: The modulus (2048 bit) of the key - Base64URL encoded.
        e:
          type: string
          description: The exponent of the key - Base64URL encoded
    JWKS:
      required:
        - keys
      type: object
      description: JSON Web Key Set (JWKS)
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JWK'
    OidcDiscovery:
      required:
        - issuer
        - jwks_uri
      type: object
      description: OpenID Connect Discovery Metadata
      properties:
        issuer:
          type: string
        jwks_uri:
          type: string
    Account:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AccountFields'
        application:
          $ref: '#/components/schemas/Application'
        organization:
          $ref: '#/components/schemas/Organization'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationPermission'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRole'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationGroup'
        auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthType'
        profile:
          $ref: '#/components/schemas/Profile'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    AccountFields:
      required:
        - id
      type: object
      properties:
        id:
          type: string
    Profile:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ProfileFields'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    ProfileFields:
      type: object
      properties:
        id:
          type: string
        photo_url:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    AccountAuthType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AccountAuthTypeFields'
        auth_type:
          $ref: '#/components/schemas/AuthType'
        account:
          $ref: '#/components/schemas/Account'
        credential:
          $ref: '#/components/schemas/Credential'
    AccountAuthTypeFields:
      type: object
      properties:
        id:
          type: string
        identifier:
          type: string
        params:
          type: object
          additionalProperties: true
          nullable: true
        active:
          type: boolean
        active_2fa:
          type: boolean
    Device:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/DeviceFields'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    DeviceFields:
      required:
        - id
        - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - mobile
            - web
            - desktop
            - other
        os:
          type: string
        mac_address:
          type: string
    _res_shared_RokwireToken:
      type: object
      properties:
        access_token:
          description: The user's access token to be provided to authorize access to ROKWIRE APIs
          type: string
        refresh_token:
          description: A refresh token that can be used to get a new access token once the one provided expires
          type: string
        token_type:
          description: The type of the provided tokens to be specified when they are sent in the "Authorization" header
          type: string
          enum:
            - Bearer
    _res_shared_ParamsOidc:
      type: object
      properties:
        oidc_token:
          type: object
          properties:
            id_token:
              type: string
            access_token:
              type: string
            token_type:
              type: string
    _req_login_Request:
      required:
        - auth_type
        - app_id
        - org_id
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - username
            - email
            - phone
            - illinois_oidc
        app_id:
          type: string
        org_id:
          type: string
        creds:
          anyOf:
            - $ref: '#/components/schemas/_req_login_CredsEmail'
            - $ref: '#/components/schemas/_req_login_CredsPhone'
            - $ref: '#/components/schemas/_req_login_CredsOidc'
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_req_login_ParamsEmail'
            - $ref: '#/components/schemas/_req_login_ParamsPhone'
            - $ref: '#/components/schemas/_req_login_ParamsOidc'
    _req_login_CredsEmail:
      required:
        - email
        - password
      type: object
      description: Auth login creds for auth_type="email"
      properties:
        email:
          type: string
        password:
          type: string
    _req_login_CredsPhone:
      type: object
      description: Auth login creds for auth_type="phone"
      required:
        - phone
      properties:
        phone:
          type: string
        code:
          type: string
    _req_login_CredsOidc:
      type: string
      description: |
        Auth login creds for auth_type="oidc"
          - full redirect URI received from OIDC provider
    _req_login_ParamsEmail:
      type: object
      description: Auth login params for auth_type="email"
      properties:
        new_user:
          type: boolean
          default: false
    _req_login_ParamsPhone:
      type: object
      description: Auth login params for auth_type="phone" (None)
    _req_login_ParamsOidc:
      type: object
      description: Auth login params for auth_type="oidc"
      properties:
        redirect_uri:
          type: string
        pkce_verifier:
          type: string
    _res_login_Response:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/_res_shared_RokwireToken'
        account:
          $ref: '#/components/schemas/_res_login_Account'
        params:
          type: object
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/_res_shared_ParamsOidc'
    _res_login_Account:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: '#/components/schemas/ProfileFields'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationPermissionFields'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRoleFields'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationGroupFields'
        auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthTypeFields'
    _req_login-url_Request:
      required:
        - auth_type
        - app_id
        - org_id
        - redirect_uri
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - illinois_oidc
        app_id:
          type: string
        org_id:
          type: string
        redirect_uri:
          type: string
    _res_login-url_Response:
      required:
        - login_url
      type: object
      properties:
        login_url:
          type: string
        params:
          type: object
          description: Params to be submitted with 'login' request (if necessary)
    _res_refresh_Response:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/_res_shared_RokwireToken'
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_res_shared_ParamsOidc'
    _req_authorize-service_Request:
      required:
        - service_id
      type: object
      properties:
        service_id:
          type: string
        approved_scopes:
          description: Scopes to be granted to this service in this and future tokens. Replaces existing scopes if present.
          type: array
          items:
            type: string
    _res_authorize-service_Response:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          description: The type of the provided tokens to be specified when they are sent in the "Authorization" header
          type: string
          enum:
            - Bearer
        approved_scopes:
          type: array
          items:
            type: string
        service_reg:
          $ref: '#/components/schemas/ServiceReg'
