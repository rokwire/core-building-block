openapi: 3.0.3
info:
  title: Rokwire Core Building Block API
  description: Core Building Block API Documentation
  version: 1.23.0
servers:
  - url: 'https://api.rokwire.illinois.edu/core'
    description: Production server
  - url: 'https://api-test.rokwire.illinois.edu/core'
    description: Test server
  - url: 'https://api-dev.rokwire.illinois.edu/core'
    description: Development server
  - url: 'http://localhost/core'
    description: Local server
tags:
  - name: Services
    description: Clients applications APIs.
  - name: Admin
    description: Clients administration applications APIs.
  - name: Enc
    description: APIs consumed by the Encryption building block.
  - name: BBs
    description: APIs consumed by the platform building blocks.
  - name: Third-Party Services
    description: APIs consumed by third-party services.
  - name: UI
    description: Endpoints for HTML webpages
  - name: System
    description: System APIs.
paths:
  /services/auth/login:
    post:
      tags:
        - Services
      summary: Login
      description: |
        Login using credentials to retrieve access token, refresh token, and user data
      requestBody:
        description: |
          User credential details and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Login'
            examples:
              email-sign_in:
                summary: Email - sign in
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@example.com", 
                      "password": "test12345"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              email-sign_up:
                summary: Email - sign up
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@example.com", 
                      "password": "test12345"
                    },
                    "params":{
                        "sign_up":true,
                        "confirm_password": "test12345"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              phone:
                summary: Phone - sign in OR sign up
                value: |
                  {
                    "auth_type": "twilio_phone",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "phone": "+12223334444", 
                      "code": "123456"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              illinois_oidc:
                summary: Illinois OIDC login
                value: |
                  {
                    "auth_type": "illinois_oidc",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": "https://redirect.example.com?code=ai324uith8gSEefesEguorgwsf43",
                    "params": {
                      "redirect_uri": "https://redirect.example.com",
                      "pkce_verifier": "w4iuhfq0u43hfq38ghn3gnSFSFiqp3ugnpugnqiprgUGNPINfsdoirpgia"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              anonymous:
                summary: Anonymous login
                value: |
                  {
                    "auth_type": "anonymous",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "anonymous_id": "dbb5ea5d-6c6c-44b8-9952-7ebf0e844beb"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/_shared_res_Login_Mfa'
                  - $ref: '#/components/schemas/_shared_res_Login'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - invalid
                      - unverified
                      - verification-expired
                      - already-exists
                      - not-found
                      - internal-server-error
                      - shared-credential-unverified
                    description: |
                      - `invalid`: Invalid credentials
                      - `unverified`: Unverified credentials
                      - `verification-expired`: Credentials verification expired. The verification is restarted
                      - `already-exists`: Account already exists when `sign-up=true`
                      - `not-found`: Account could not be found when `sign-up=false`
                      - `internal-server-error`: An undefined error occurred
                      - `shared-credential-unverified`: The shared credential has not been verified yet
                  message:
                    type: string
  /services/auth/mfa:
    post:
      tags:
        - Services
      summary: MFA
      description: |
        Verify multi-factor authentication credentials to complete login
      parameters:
        - name: state
          in: query
          description: Login state
          required: false
          style: form
          explode: false
          schema:
            type: string
      requestBody:
        description: |
          MFA credentials and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Login_Mfa'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Login'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/refresh:
    post:
      tags:
        - Services
      summary: Refresh
      description: |
        Refresh access token using a refresh token
      requestBody:
        description: |
          Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Refresh'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Refresh'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/login-url:
    post:
      tags:
        - Services
      summary: Get SSO login url
      description: |
        Retrieve a pre-formatted SSO login URL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_LoginUrl'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_LoginUrl'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/logout:
    post:
      tags:
        - Services
      summary: Logout
      description: |
        Logouts an account
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - all_sessions
              type: object
              properties:
                all_sessions:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/credential/verify:
    get:
      tags:
        - Services
      summary: Validate verification code
      description: |
        Validates verification code to verify account ownership
      parameters:
        - name: id
          in: query
          description: Credential ID
          required: true
          style: form
          explode: false
          schema:
            type: string
        - name: code
          in: query
          description: Verification code
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Successfully verified code
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/credential/send-verify:
    post:
      tags:
        - Services
      summary: Send verification code to identifier
      description: |
        Sends verification code to identifier to verify account ownership
      requestBody:
        description: |
          Account information to be checked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_credential_send-verify'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Successfully sent verification code
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/credential/forgot/initiate:
    post:
      tags:
        - Services
      summary: Initiate reset credential for a given identifier
      description: |
        Email auth type:
        Sends the reset password code for a given identifier
        Generates a reset code and expiry and sends it to the given identifier 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_credential_forgot_initiate'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - unverified
                      - verification-expired
                      - internal-server-error
                    description: |
                      - `unverified`: Unverified credentials
                      - `verification-expired`: Credentials verification expired. The verification is restarted
                      - `internal-server-error`: An undefined error occurred
                  message:
                    type: string
  /services/auth/credential/forgot/complete:
    post:
      tags:
        - Services
      summary: Complete resetting forgotten credential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_credential_forgot_complete'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/credential/update:
    post:
      tags:
        - Services
      summary: Reset a credential from client application
      description: |
        Needs user auth token for authorization

        **Auth:** Requires token from direct user authentication from recent login
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_credential_update'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/verify-mfa:
    post:
      tags:
        - Services
      summary: MFA
      description: |
        Verify multi-factor authentication credentials to complete MFA registration
      requestBody:
        description: |
          MFA credentials and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Mfa'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/account/exists:
    post:
      tags:
        - Services
      summary: Check if an account already exists
      description: |
        Account exists checks if an account exists for the provided user identifier and auth type
      requestBody:
        description: |
          Account information to be checked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_AccountCheck'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_AccountCheck'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/account/can-sign-in:
    post:
      tags:
        - Services
      summary: Check if a client can sign in
      description: |
        Checks if a client can sign in to an existing account for the provided user identifier and auth type
      requestBody:
        description: |
          Account information to be checked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_AccountCheck'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_AccountCheck'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/account/can-link:
    post:
      tags:
        - Services
      summary: Check if a client can link an auth type
      description: |
        Checks if a client is able to link a new auth type to an account
      requestBody:
        description: |
          Account information to be checked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_AccountCheck'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_AccountCheck'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/account/auth-type/link:
    post:
      tags:
        - Services
      summary: Link credentials
      description: |
        Link credentials to an existing account

        **Auth:** Requires "authenticated" auth token
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_account_auth-type-link'
            examples:
              email-sign_up:
                summary: Email
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@example.com", 
                      "password": "test12345"
                    },
                    "params":{
                        "confirm_password": "test12345"
                    }
                  }
              phone:
                summary: Phone
                value: |
                  {
                    "auth_type": "twilio_phone",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "phone": "+12223334444"
                    }
                  }
              illinois_oidc:
                summary: Illinois OIDC
                value: |
                  {
                    "auth_type": "illinois_oidc",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": "https://redirect.example.com?code=ai324uith8gSEefesEguorgwsf43",
                    "params": {
                      "redirect_uri": "https://redirect.example.com",
                      "pkce_verifier": "w4iuhfq0u43hfq38ghn3gnSFSFiqp3ugnpugnqiprgUGNPINfsdoirpgia"
                    }
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_services_res_account_auth-type-link'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - invalid
                      - unverified
                      - verification-expired
                      - already-exists
                      - not-found
                      - internal-server-error
                    description: |
                      - `invalid`: Invalid credentials
                      - `unverified`: Unverified credentials
                      - `verification-expired`: Credentials verification expired. The verification is restarted
                      - `already-exists`: Auth type identifier already exists
                      - `not-found`: Account could not be found when `sign-up=false`
                      - `internal-server-error`: An undefined error occurred
                  message:
                    type: string
    delete:
      tags:
        - Services
      summary: Unlink credentials
      description: |
        Unlink credentials from an existing account

        **Auth:** Requires "authenticated" auth token
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_account_auth-type-unlink'
            examples:
              email:
                summary: Email
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "identifier": "test@example.com"
                  }
              phone:
                summary: Phone
                value: |
                  {
                    "auth_type": "twilio_phone",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "identifier": "+12223334444"
                  }
              illinois_oidc:
                summary: Illinois OIDC
                value: |
                  {
                    "auth_type": "illinois_oidc",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "identifier": "123456789"
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_services_res_account_auth-type-link'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/authorize-service:
    post:
      tags:
        - Services
      summary: Authorize service
      description: |
        Authorize a third-party service and get a scoped access token that can be used to access its APIs

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_authorize-service'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_services_res_authorize-service'
              examples:
                authorized:
                  summary: Service authorized
                  value: |
                    {
                      "access_token": "string",
                      "token_type": "Bearer",
                      "approved_scopes": [
                        "string"
                      ]
                    }
                unauthorized:
                  summary: Service unauthorized
                  value: |
                    {
                      "service_reg": {
                        "service_id": "string",
                        "service_account_id": "string",
                        "host": "string",
                        "pub_key": {
                          "key_pem": "string",
                          "alg": "string"
                        },
                        "name": "string",
                        "description": "string",
                        "info_url": "string",
                        "logo_url": "string",
                        "scopes": [
                          {
                            "scope": "string",
                            "required": true,
                            "explanation": "string"
                          }
                        ],
                        "first_party": true
                      }
                    }
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/service-regs:
    get:
      tags:
        - Services
      summary: Get service registrations
      description: |
        Returns service registration records

        **Auth:** Requires auth token
      security:
        - bearerAuth: []
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/account:
    delete:
      tags:
        - Services
      summary: Delete user account
      description: |
        Deletes a user account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    get:
      tags:
        - Services
      summary: Get user account
      description: |
        Get the user account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Account'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/account/mfa:
    get:
      tags:
        - Services
      summary: Get account MFA types
      description: |
        Get MFA types set up for an account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_shared_res_Mfa'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Services
      summary: Enroll in MFA type
      description: |
        Add MFA type to an account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      requestBody:
        description: |
          MFA enrollment params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Mfa'
            examples:
              email:
                summary: Enroll in email MFA
                value: |
                  {
                    "identifier": "test@test.com",
                    "type": "email"
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Mfa'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - Services
      summary: Remove MFA type
      description: |
        Remove MFA type from an account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      requestBody:
        description: |
          MFA params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Mfa'
            examples:
              email:
                summary: Unenroll in email MFA
                value: |
                  {
                    "identifier": "test@test.com",
                    "type": "email"
                  }
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/account/preferences:
    put:
      tags:
        - Services
      summary: Update account preferences
      description: |
        Updates account preferences

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      requestBody:
        description: Account preferences
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    get:
      tags:
        - Services
      summary: Get preferences
      description: |
        Returns a user preferences

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/account/profile:
    get:
      tags:
        - Services
      summary: Get user profile
      description: |
        Returns a user profile

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Services
      summary: Update user profile
      description: |
        Updates a user profile

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      requestBody:
        description: Profile update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Profile'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/test:
    get:
      tags:
        - Services
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /services/application/configs:
    post:
      tags:
        - Services
      summary: Gets default app config
      description: |
        Returns the default app config for the highest version that is equal to or less than the provided version

        **Auth:** Requires a valid API Key for access.
      requestBody:
        description: |
          App config query
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_application_configs'
            example:
              version: 1.0.1
              app_type_identifier: edu.illinois.rokwire.android
              api_key: ''
      responses:
        '200':
          description: successfully read app configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationConfig'
        '400':
          description: Bad request.
        '401':
          description: Unauthorized
        '404':
          description: AppConfig not found
        '500':
          description: Internal error
  /services/application/organization/configs:
    post:
      tags:
        - Services
      summary: Gets organization-specific app configs
      description: |
        Returns the app config for the highest version that is equal to or less than the provided version for the currently authenticated organization

        **Auth:** Requires auth token
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_application_org-configs'
            example:
              version: 1.0.1
              app_type_identifier: edu.illinois.rokwire.android
      responses:
        '200':
          description: successfully read app configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationConfig'
        '400':
          description: Bad request.
        '401':
          description: Unauthorized
        '404':
          description: AppConfig not found
        '500':
          description: Internal error
  /admin/auth/login:
    post:
      tags:
        - Admin
      summary: Login
      description: |
        Login using credentials to retrieve access token, refresh token, and user data

        **Auth:** Requires API key
      requestBody:
        description: |
          User credential details and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Login'
            examples:
              email:
                summary: Email
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@example.com", 
                      "password": "test12345"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              phone:
                summary: Phone
                value: |
                  {
                    "auth_type": "twilio_phone",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "phone": "+12223334444", 
                      "code": "123456"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              illinois_oidc:
                summary: Illinois OIDC
                value: |
                  {
                    "auth_type": "illinois_oidc",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": "https://redirect.example.com?code=ai324uith8gSEefesEguorgwsf43",
                    "params": {
                      "redirect_uri": "https://redirect.example.com",
                      "pkce_verifier": "w4iuhfq0u43hfq38ghn3gnSFSFiqp3ugnpugnqiprgUGNPINfsdoirpgia"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/_shared_res_Login_Mfa'
                  - $ref: '#/components/schemas/_shared_res_Login'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/auth/mfa:
    post:
      tags:
        - Admin
      summary: MFA
      description: |
        Verify multi-factor authentication credentials to complete login

        **Auth:** Requires API key
      parameters:
        - name: state
          in: query
          description: Login state
          required: false
          style: form
          explode: false
          schema:
            type: string
      requestBody:
        description: |
          MFA credentials and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Login_Mfa'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Login'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/auth/refresh:
    post:
      tags:
        - Admin
      summary: Refresh
      description: |
        Refresh access token using a refresh token

        **Auth:** Requires API key
      requestBody:
        description: |
          Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Refresh'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Refresh'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/auth/login-url:
    post:
      tags:
        - Admin
      summary: Get SSO login url
      description: |
        Retrieve a pre-formatted SSO login URL

        **Auth:** Requires API key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_LoginUrl'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_LoginUrl'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/auth/verify-mfa:
    post:
      tags:
        - Admin
      summary: MFA
      description: |
        Verify multi-factor authentication credentials to complete MFA registration

        **Auth:** Requires admin access token
      requestBody:
        description: |
          MFA credentials and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Mfa'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/auth/app-token:
    get:
      tags:
        - Admin
      summary: App token
      description: |
        Retrieve an admin token for the specified application

        **Auth:** Requires admin access token
      security:
        - bearerAuth: []
      parameters:
        - name: app_id
          in: query
          description: The application ID of the token to return
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_admin_res_app-token'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/account:
    get:
      tags:
        - Admin
      summary: Get user account
      description: |
        Get the user account

        **Auth:** Requires admin access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Account'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/account/mfa:
    get:
      tags:
        - Admin
      summary: Get account MFA types
      description: |
        Get MFA types set up for an account

        **Auth:** Requires admin access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_shared_res_Mfa'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Enroll in MFA type
      description: |
        Add MFA type to an account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          description: MFA type
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Mfa'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - Admin
      summary: Remove MFA type
      description: |
        Remove MFA type from an account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          description: MFA type
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/accounts:
    get:
      tags:
        - Admin
      summary: Finds application accounts
      description: |
        Finds accounts for the specified application

        **Auth:** Requires admin access token with `get_accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: account-id
          in: query
          description: The account ID
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: auth-type-identifier
          in: query
          description: The authentication type identifier
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_shared_res_Account'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/admin/application/account/{id}/devices':
    get:
      tags:
        - Admin
      summary: Finds application account devices
      description: |
        Finds devices for the specified account and application

        **Auth:** Requires admin access token with `get_account-devices` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The account ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/admin/application/account/{account_id}/login-sessions/{session_id}':
    delete:
      tags:
        - Admin
      summary: Delete an account session
      description: |
        Delete an account session for specific application

        **Auth:** Requires admin access token with `delete_login-sessions` or `all_login-sessions` permission
      security:
        - bearerAuth: []
      parameters:
        - name: session_id
          in: path
          description: The sessionID of the login session to delete
          required: true
          explode: false
          schema:
            type: string
        - name: account_id
          in: path
          description: The accountID of the login session to delete
          required: true
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/account/permissions/grant:
    put:
      tags:
        - Admin
      summary: Grant account permissions
      description: |
        Grant account permissions

        **Auth:** Requires admin access token with 'update_account-permissions' or `update_account-authorization` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permissions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_grant-permissions'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/account/permissions/revoke:
    delete:
      tags:
        - Admin
      summary: Delete permissions from account
      description: |
        Deletes an existing permissions from account

        **Auth:** Requires admin access token with 'update_account-permissions' or `update_account-authorization` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permissions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_revoke-permissions'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/account/roles/grant:
    put:
      tags:
        - Admin
      summary: Grant account roles
      description: |
        Grant account roles

        **Auth:** Requires admin access token with 'update_account-auth-roles' or `update_account-authorization` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Roles
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_grant-roles-to-account'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/account/roles/revoke:
    delete:
      tags:
        - Admin
      summary: Delete roles from account
      description: |
        Deletes an existing roles from account

        **Auth:** Requires admin access token with 'update_account-auth-roles' or `update_account-authorization` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Roles
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_revoke-roles-from-account'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/login-sessions:
    get:
      tags:
        - Admin
      summary: Get application sessions
      description: |
        Get application sessions

        **Auth:** Requires admin access token with `get_login-sessions`, `update_login-sessions`, `delete_login-sessions`, or `all_login-sessions` permission
      security:
        - bearerAuth: []
      parameters:
        - name: identifier
          in: query
          description: identifier
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: account-auth-type-identifier
          in: query
          description: account auth type identifier
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: app-type-id
          in: query
          description: app type id
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: app-type-identifier
          in: query
          description: app type identifier
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: anonymous
          in: query
          description: anonymous
          required: false
          style: form
          explode: false
          schema:
            type: boolean
        - name: device-id
          in: query
          description: device id
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: ip-address
          in: query
          description: ip address
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_shared_res_LoginSession'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/groups:
    get:
      tags:
        - Admin
      summary: Get application groups
      description: |
        Gets application groups
            
        **Auth:** Requires admin access token with at least one of the following permissions:
        - `get_auth-groups`
        - `update_auth-groups`
        - `delete_auth-groups`
        - `all_auth-groups`
        - `update_account-auth-roles`
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppOrgGroupFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Create application group
      description: |
        Create application group

         **Auth:** Requires admin access token with `update_auth-groups` or `all_auth-groups` permission
         - bearerAuth: []
      security:
        - bearerAuth: []
      requestBody:
        description: Application group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_create-application_group'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/admin/application/groups/{id}':
    delete:
      tags:
        - Admin
      summary: Delete application group
      description: |
        Deletes an existing application group

        **Auth:** Requires admin access token with `delete_auth-groups` or `all_auth-groups` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The group ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/group/accounts/add:
    put:
      tags:
        - Admin
      summary: Add accounts to a group
      description: |
        Add accounts 

        **Auth:** Requires admin access token with 'update_account-auth-groups' or `update_account-authorization` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Roles
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_add-accounts-to-group'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/group/accounts/remove:
    delete:
      tags:
        - Admin
      summary: Delete accounts from group
      description: |
        Deletes an existing accounts from group

        **Auth:** Requires admin access token with 'update_account-auth-groups' or `update_account-authorization` permission
      security:
        - bearerAuth: []
      requestBody:
        description: account ID for removing
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_remove-account-from-group'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/permissions:
    get:
      tags:
        - Admin
      summary: Get application permissions
      description: |
        Get application permissions

        **Auth:** Requires admin access token with 'get_permissions' permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/roles:
    get:
      tags:
        - Admin
      summary: Get application roles
      description: |
        Gets application roles

        **Auth:** Requires admin access token with 'get_auth-roles', 'update_auth-roles', 'delete_auth-roles', or `all_auth-roles` permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppOrgRoleFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Create application role
      description: |
        Creates application role

        **Auth:** Requires admin access token with 'update_auth-roles' or `all_auth-roles` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Application role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_create-application_role'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/admin/application/roles/{id}':
    delete:
      tags:
        - Admin
      summary: Delete application role
      description: |
        Delete application role

        **Auth:** Requires admin access token with 'delete_auth-roles' or `all_auth-roles` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The role ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/application/role/permissions/grant:
    put:
      tags:
        - Admin
      summary: Grant permissions to role
      description: |
        Grant permissions to role

        **Auth:** Requires admin access token with 'update_auth-roles' or `all_auth-roles` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permissions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_admin_req_grant-permissions-to-role'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/organization/applications:
    get:
      tags:
        - Admin
      summary: Get applications for an organization
      description: |
        Gets applications for an organization

        **Auth:** Requires admin access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /enc/test:
    get:
      tags:
        - Enc
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /bbs/test:
    get:
      tags:
        - BBs
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /bbs/service-regs:
    get:
      tags:
        - BBs
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/bbs/service-account/{id}':
    post:
      tags:
        - BBs
      summary: Get service account params
      description: |
        Returns service account parameters
      parameters:
        - name: id
          in: path
          description: ID of the service account
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: |
          Service account credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_service-accounts_params'
            examples:
              static_token:
                summary: Static token
                value: |
                  {
                    "auth_type": "static_token",
                    "creds": {
                      "token": "account_token"
                    }
                  }
              signature:
                summary: Signature
                value: |
                  {
                    "auth_type": "signature"
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppOrgPair'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /bbs/access-token:
    post:
      tags:
        - BBs
      summary: Get service account access token
      description: |
        Returns a new service account access token
      requestBody:
        description: |
          Service account credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_service-accounts_access-token'
            examples:
              static_token:
                summary: Static token
                value: |
                  {
                    "account_id": "service_account_id",
                    "app_id": "9766",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "auth_type": "static_token",
                    "creds": {
                      "token": "account_token"
                    }
                  }
              signature:
                summary: Signature
                value: |
                  {
                    "account_id": "service_account_id",
                    "app_id": "9766",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "auth_type": "signature",
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_RokwireToken'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /bbs/access-tokens:
    post:
      tags:
        - BBs
      summary: Get all service account access tokens
      description: |
        Returns a new service account access token for all authorized app org pairs
      requestBody:
        description: |
          Service account credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_service-accounts_access-tokens'
            examples:
              static_token:
                summary: Static token
                value: |
                  {
                    "account_id": "service_account_id",
                    "auth_type": "static_token",
                    "creds": {
                      "token": "account_token"
                    }
                  }
              signature:
                summary: Signature
                value: |
                  {
                    "account_id": "service_account_id",
                    "auth_type": "signature",
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_services_res_service-accounts_access-tokens'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /tps/service-regs:
    get:
      tags:
        - Third-Party Services
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /tps/auth-keys:
    get:
      tags:
        - Third-Party Services
      summary: Get auth public key
      description: |
        Returns auth public key in JWKS format
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/tps/service-account/{id}':
    post:
      tags:
        - Third-Party Services
      summary: Get service account params
      description: |
        Returns service account parameters
      parameters:
        - name: id
          in: path
          description: ID of the service account
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: |
          Service account credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_service-accounts_params'
            examples:
              static_token:
                summary: Static token
                value: |
                  {
                    "auth_type": "static_token",
                    "creds": {
                      "token": "account_token"
                    }
                  }
              signature:
                summary: Signature
                value: |
                  {
                    "auth_type": "signature"
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppOrgPair'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /tps/access-token:
    post:
      tags:
        - Third-Party Services
      summary: Get service account access token
      description: |
        Returns a new service account access token
      requestBody:
        description: |
          Service account credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_service-accounts_access-token'
            examples:
              static_token:
                summary: Static token
                value: |
                  {
                    "account_id": "service_account_id",
                    "app_id": "9766",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "auth_type": "static_token",
                    "creds": {
                      "token": "account_token"
                    }
                  }
              signature:
                summary: Signature
                value: |
                  {
                    "account_id": "service_account_id",
                    "app_id": "9766",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "auth_type": "signature",
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_RokwireToken'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /tps/access-tokens:
    post:
      tags:
        - Third-Party Services
      summary: Get all service account access tokens
      description: |
        Returns a new service account access token for all authorized app org pairs
      requestBody:
        description: |
          Service account credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services_req_service-accounts_access-tokens'
            examples:
              static_token:
                summary: Static token
                value: |
                  {
                    "account_id": "service_account_id",
                    "auth_type": "static_token",
                    "creds": {
                      "token": "account_token"
                    }
                  }
              signature:
                summary: Signature
                value: |
                  {
                    "account_id": "service_account_id",
                    "auth_type": "signature",
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_services_res_service-accounts_access-tokens'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/auth/login:
    post:
      tags:
        - System
      summary: Login
      description: |
        Login using credentials to retrieve access token, refresh token, and user data

        **Auth:** Requires API key
      requestBody:
        description: |
          User credential details and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Login'
            examples:
              email:
                summary: Email
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire.admin",
                    "org_id": "5d7ed0a6-48f2-4473-ae4e-120f2b541a22",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@example.com", 
                      "password": "test12345"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              phone:
                summary: Phone
                value: |
                  {
                    "auth_type": "twilio_phone",
                    "app_type_identifier": "edu.illinois.rokwire.admin",
                    "org_id": "5d7ed0a6-48f2-4473-ae4e-120f2b541a22",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "phone": "+12223334444", 
                      "code": "123456"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              illinois_oidc:
                summary: Illinois OIDC login
                value: |
                  {
                    "auth_type": "illinois_oidc",
                    "app_type_identifier": "edu.illinois.rokwire.admin",
                    "org_id": "5d7ed0a6-48f2-4473-ae4e-120f2b541a22",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": "https://redirect.example.com?code=ai324uith8gSEefesEguorgwsf43",
                    "params": {
                      "redirect_uri": "https://redirect.example.com",
                      "pkce_verifier": "w4iuhfq0u43hfq38ghn3gnSFSFiqp3ugnpugnqiprgUGNPINfsdoirpgia"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/_shared_res_Login_Mfa'
                  - $ref: '#/components/schemas/_shared_res_Login'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/auth/mfa:
    post:
      tags:
        - System
      summary: MFA
      description: |
        Verify multi-factor authentication credentials to complete login

        **Auth:** Requires system access token
      parameters:
        - name: state
          in: query
          description: Login state
          required: false
          style: form
          explode: false
          schema:
            type: string
      requestBody:
        description: |
          MFA credentials and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Login_Mfa'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Login'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/auth/refresh:
    post:
      tags:
        - System
      summary: Refresh
      description: |
        Refresh access token using a refresh token

        **Auth:** Requires API key
      requestBody:
        description: |
          Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Refresh'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Refresh'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/auth/login-url:
    post:
      tags:
        - System
      summary: Get SSO login url
      description: |
        Retrieve a pre-formatted SSO login URL

        **Auth:** Requires API key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_LoginUrl'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_LoginUrl'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/auth/verify-mfa:
    post:
      tags:
        - System
      summary: MFA
      description: |
        Verify multi-factor authentication credentials to complete MFA registration

        **Auth:** Requires API key
      requestBody:
        description: |
          MFA credentials and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_shared_req_Mfa'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/global-config:
    get:
      tags:
        - System
      summary: Get global config
      description: |
        Gives the system global config

        **Auth:** Requires system access token with `get_global-config` or `all_global-config` permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfig'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Create global config
      description: |
        Creates the system global config

        **Auth:** Requires system access token with `update_global-config` or `all_global-config` permission
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - System
      summary: Update global config
      description: |
        Updates the system global config

        **Auth:** Requires system access token with `update_global-config` or `all_global-config` permission
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/system/organizations/{id}':
    get:
      tags:
        - System
      summary: Get organization by ID
      description: |
        Gets organization by ID

        **Auth:** Requires system access token with `get_organizations` or `all_organizations` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the organization
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal error
    put:
      tags:
        - System
      summary: Update organization by ID
      description: |
        Updates organization by ID

        **Auth:** Requires system access token with `update_organizations` or `all_organizations` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the organization that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: update one organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_update_Organization'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/organizations:
    get:
      tags:
        - System
      summary: Get organizations
      description: |
        Gets organizations

        **Auth:** Requires system access token with `get_organizations` or `all_organizations` permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Create organization
      description: |
        Creates organization

        **Auth:** Requires system access token with `update_organizations` or `all_organizations` permission
      security:
        - bearerAuth: []
      requestBody:
        description: creates one organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_create-Organization'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/service-regs:
    get:
      tags:
        - System
      summary: Get service registrations
      description: |
        Returns service registration records

        **Auth:** Requires system access token with `get_service-regs` or `all_service-regs` permission
      security:
        - bearerAuth: []
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Register service
      description: |
        Creates a new service registration

        The "service_id" of the registration must not match an existing registration  

        **Auth:** Requires system access token with `update_service-regs` or `all_service-regs` permission
      security:
        - bearerAuth: []
      requestBody:
        description: service registration record to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReg'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - System
      summary: Update service registration
      description: |
        Update an existing service registration

        The "service_id" of the registration must match an existing registration

        **Auth:** Requires system access token with `update_service-regs` or `all_service-regs` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Service registration record update to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReg'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - System
      summary: Deregister service
      description: |
        Deletes an existing service registration record

        **Auth:** Requires system access token with `delete_service-regs` or `all_service-regs` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          description: The service ID of the registration to delete
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/system/service-accounts/{id}':
    get:
      tags:
        - System
      summary: Get service account instance
      description: |
        Get service account instance by account ID, app ID, and org ID

        **Auth:** Requires system access token with `get_service-accounts` or `all_service-accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the service account
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: app_id
          in: query
          description: Application ID of the service account instance
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: org_id
          in: query
          description: Organization ID of the service account instance
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - System
      summary: Update service account instance
      description: |
        Updates a service account instance

        **Auth:** Requires system access token with `update_service-accounts` or `all_service-accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the service account instance
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: app_id
          in: query
          description: Application ID of the service account instance
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: org_id
          in: query
          description: Organization ID of the service account instance
          required: false
          style: form
          explode: false
          schema:
            type: string
      requestBody:
        description: |
          Service account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_update_service-account'
            examples:
              update_account:
                summary: Update service account
                value: |
                  {
                    "name": "updated_name",
                    "permissions": ["permission1", "new_permission1"]
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - System
      summary: Deregister service account instance
      description: |
        Removes a service account instance

        **Auth:** Requires system access token with `delete_service-accounts` or `all_service-accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the service account instance to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: app_id
          in: query
          description: Application ID of the service account instance
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: org_id
          in: query
          description: Organization ID of the service account instance
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/service-accounts:
    get:
      tags:
        - System
      summary: Get service accounts
      description: |
        Get list of all service accounts matching a search

        **Auth:** Requires system access token with `get_service-accounts` or `all_service-accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: account_id
          in: query
          description: Service account ID to search for
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: name
          in: query
          description: Service account name to search for
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: app_id
          in: query
          description: Service account app ID to search for
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: org_id
          in: query
          description: Service account org ID to search for
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: permissions
          in: query
          description: A comma-separated list of service account permissions to search for
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceAccount'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Register service account
      description: |
        Creates a new service account

        **Auth:** Requires system access token with `update_service-accounts` or `all_service-accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: app_id
          in: query
          description: Service account app ID to copy from
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: org_id
          in: query
          description: Service account org ID to copy from
          required: false
          style: form
          explode: false
          schema:
            type: string
      requestBody:
        description: |
          Service account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_create_service-account'
            examples:
              initial_creds:
                summary: Register new account with initial credentials
                value: |
                  {
                    "name": "test_account",
                    "app_id": "9766",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "permissions": ["permission1", "permission2"],
                    "first_party": true,
                    "creds": [
                      {
                        "name": "initial_token",
                        "type": "static_token"
                      },
                      {
                        "name": "initial_signature",
                        "type": "signature",
                        "params": {
                          "pub_key": "public_key_pem"
                        }
                      }
                    ]
                  }
              no_initial_creds:
                summary: Register new account without initial credentials
                value: |
                  {
                    "name": "test_account",
                    "app_id": "9766",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "permissions": ["permission1", "permission2"],
                    "first_party": true
                  }
              copy_from:
                summary: Register new account instance by copying from existing account instance
                value: |
                  {
                    "account_id": "12345678-e2cd-11eb-af68-60f81db5ecc0",
                    "app_id": "9766",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "permissions": ["permission1", "permission2"]
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - System
      summary: Delete service accounts
      description: |
        Delete service accounts matching an account ID

        **Auth:** Requires system access token with `delete_service-accounts` or `all_service-accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: account_id
          in: query
          description: Service account ID to delete
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/system/service-accounts/{id}/creds':
    post:
      tags:
        - System
      summary: Add service account credential
      description: |
        Adds a new credential to an existing service account

        **Auth:** Requires system access token with `update_service-accounts` or `all_service-accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the service account to add new credential
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: |
          Service account credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccountCredential'
            examples:
              static_token:
                summary: Add static token credential
                value: |
                  {
                    "name": "token_cred",
                    "type": "static_token"
                  }
              signature:
                summary: Add signature credential
                value: |
                  {
                    "name": "signature_cred",
                    "type": "signature",
                    "params": {
                      "pub_key": "public_key_pem"
                    }
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountCredential'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - System
      summary: Remove service account credential
      description: |
        Removes a credential from an existing service account

        **Auth:** Requires system access token with `delete_service-accounts` or `all_service-accounts` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the service account to remove credential
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: cred_id
          in: query
          description: id of the credential to be removed
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/system/applications/{id}':
    get:
      tags:
        - System
      summary: Get application by ID
      description: |
        Gets application by provided ID

        **Auth:** Requires system access token with `get_applications` or `all_applications` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the application
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal error
  /system/applications:
    get:
      tags:
        - System
      summary: Get applications
      description: |
        Gets applications

        **Auth:** Requires system access token with `get_applications` or `all_applications` permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Create application
      description: |
        Creates application

        **Auth:** Requires system access token with `update_applications` or `all_applications` permission
      security:
        - bearerAuth: []
      requestBody:
        description: creates one application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_create_Application'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/permissions:
    post:
      tags:
        - System
      summary: Create permission
      description: |
        Creates permission

        **Auth:** Requires system access token with `update_permissions` or `all_permissions` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_permissions'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - System
      summary: Updates permission
      description: |
        Updates permission

        **Auth:** Requires system access token with `update_permissions` or `all_permissions` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_permissions'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/application-roles:
    post:
      tags:
        - System
      summary: Create application role
      description: |
        Creates application role

        **Auth:** Requires system access token with `update_auth-roles` or `all_auth-roles` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Application role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_application-roles'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/application-api-keys:
    get:
      tags:
        - System
      summary: Get application API keys
      description: |
        Returns all API key records for a given app ID

        **Auth:** Requires system access token with `get_api-keys` or `all_api-keys` permission
      security:
        - bearerAuth: []
      parameters:
        - name: app_id
          in: query
          description: The app ID of the API keys to return
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKey'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/application/configs:
    get:
      tags:
        - System
      summary: Reads app configs
      description: |
        If version is provided, the app config for the highest version that is equal to or less than this value will be returned as the only item in the list.
        Otherwise it will return a list of all app config versions for the given app_type_id. If org_id is provided, the configs for that organization will
        be returned, otherwise the default configs will be returned.

        **Auth:** Requires system access token with `get_app-configs` or `all_app-configs` permission
      security:
        - bearerAuth: []
      parameters:
        - name: app_type_id
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: string
        - name: org_id
          in: query
          style: form
          explode: false
          schema:
            type: string
        - name: version
          in: query
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successfully read app configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationConfig'
        '400':
          description: Bad request.
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Creates app configs
      description: |
        Creates a new app config

        **Auth:** Requires system access token with `update_app-configs` or `all_app-configs` permission
      security:
        - bearerAuth: []
      requestBody:
        description: New app configs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_create_ApplicationConfig_Request'
            example:
              version: 1.0.1
              app_type_id: 7e037f2d-b423-4b4d-a1bc-18507f81c6d1
              org_id: 0a2eff20-e2cd-11eb-af68-60f81db5ecc0
              data: {}
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/system/application/configs/{id}':
    get:
      tags:
        - System
      summary: Reads app configs by ID
      description: |
        Get a app configs for the provided ID

        **Auth:** Requires system access token with `get_app-configs` or `all_app-configs` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: app config id to read
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationConfig'
        '400':
          description: Bad request.
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - System
      summary: Updates app config by ID
      description: |
        Updates app config with the provided ID

        **Auth:** Requires system access token with `update_app-configs` or `all_app-configs` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: updated app config
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_create_ApplicationConfig_Request'
            example:
              version: 1.0.1
              app_type_id: 7e037f2d-b423-4b4d-a1bc-18507f81c6d1
              org_id: 0a2eff20-e2cd-11eb-af68-60f81db5ecc0
              data:
                url: rokmetro.dev
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - System
      summary: Deletes app config by ID
      description: |
        Deletes app config with the provided ID

        **Auth:** Requires system access token with `delete_app-configs` or `all_app-configs` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/account/permissions:
    put:
      tags:
        - System
      summary: Grant account permissions
      description: |
        Grant account permissions

        **Auth:** Requires system access token with `update_account-permissions` or `all_account-permissions` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permissions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_account-permissions'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/account/roles:
    put:
      tags:
        - System
      summary: Grant account roles
      description: |
        Grant account roles

        **Auth:** Requires system access token with `update_account-roles` or `all_account-roles` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Roles
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_account-roles'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/account/mfa:
    get:
      tags:
        - System
      summary: Get account MFA types
      description: |
        Get MFA types set up for an account

        **Auth:** Requires system access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_shared_res_Mfa'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Enroll in MFA type
      description: |
        Add MFA type to an account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          description: MFA type
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_shared_res_Mfa'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - System
      summary: Remove MFA type
      description: |
        Remove MFA type from an account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          description: MFA type
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/api-keys:
    get:
      tags:
        - System
      summary: Get API key
      description: |
        Returns API key record

        **Auth:** Requires system access token with `get_api-keys` or `all_api-keys` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          description: The ID of the API key to return
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Create API key
      description: |
        Creates a new API key record

        **Auth:** Requires system access token with `update_api-keys` or `all_api-keys` permission
      security:
        - bearerAuth: []
      requestBody:
        description: API key record to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
            example: |
              {
                "app_id": "string",
                "key": "string"
              }
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - System
      summary: Update API key
      description: |
        Update an existing API key record

        Must include the "id" field to identify which key is to be udpated

        **Auth:** Requires system access token with `update_api-keys` or `all_api-keys` permission
      security:
        - bearerAuth: []
      requestBody:
        description: API key record update to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - System
      summary: Delete API key
      description: |
        Deletes an existing API key record

        **Auth:** Requires system access token with `delete_api-keys` or `all_api-keys` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          description: The ID of the API key to delete
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/auth-types:
    get:
      tags:
        - System
      summary: Get auth types
      description: |
        Gets auth types

        **Auth:** Requires system access token with `get_auth-types` or `all_auth-types` permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthTypeFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - System
      summary: Create auth type
      description: |
        Creates auth type

        **Auth:** Requires system access token with `update_auth-types` or `all_auth-types` permission
      security:
        - bearerAuth: []
      requestBody:
        description: creates one auth-type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_create_auth_type'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/system/auth-types/{id}':
    put:
      tags:
        - System
      summary: Update auth type by ID
      description: |
        Updates auth type with the provided ID

        **Auth:** Requires system access token with `update_auth-types` or `all_auth-types` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the auth type that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: update one auth type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_system_req_update_auth_type'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/AuthTypeFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /ui/credential/reset:
    get:
      tags:
        - UI
      summary: Display HTML password reset page
      description: |
        Serves an HTML page with password reset form
      parameters:
        - name: id
          in: query
          description: Credential ID
          required: true
          style: form
          explode: false
          schema:
            type: string
        - name: code
          in: query
          description: Reset code
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation (HTML)
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /ui/credential/verify:
    get:
      tags:
        - UI
      summary: Validate verification code
      description: |
        Validates verification code to verify account ownership and displays result in an HTML page
      parameters:
        - name: id
          in: query
          description: Credential ID
          required: true
          style: form
          explode: false
          schema:
            type: string
        - name: code
          in: query
          description: Verification code
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation (HTML page)
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /version:
    get:
      summary: Get service version
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: v1.1.0
  /.well-known/openid-configuration:
    get:
      summary: OpenID Connect Discovery
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCDiscovery'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GlobalConfig:
      required:
        - setting
      type: object
      properties:
        setting:
          type: string
    Application:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationFields'
        types:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationType'
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationOrganization'
    ApplicationFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        multi_tenant:
          type: boolean
        admin:
          type: boolean
        shared_identities:
          type: boolean
    ApplicationType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationTypeFields'
        application:
          $ref: '#/components/schemas/Application'
    ApplicationTypeFields:
      required:
        - id
        - identifier
      type: object
      properties:
        id:
          type: string
        identifier:
          type: string
        name:
          type: string
        versions:
          type: array
          items:
            type: string
    ApplicationOrganization:
      type: object
      properties:
        id:
          type: string
        application:
          $ref: '#/components/schemas/Application'
        organization:
          $ref: '#/components/schemas/Organization'
        TODO:
          type: string
    Permission:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/PermissionFields'
    PermissionFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        service_id:
          type: string
        assigners:
          type: array
          items:
            type: string
    AppOrgRole:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AppOrgRoleFields'
        application:
          $ref: '#/components/schemas/Application'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    AppOrgRoleFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        system:
          type: boolean
    AppOrgGroup:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AppOrgGroupFields'
        application:
          $ref: '#/components/schemas/Application'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgRole'
    AppOrgGroupFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        system:
          type: boolean
    Organization:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/OrganizationFields'
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    OrganizationFields:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
    OrganizationConfig:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/OrganizationConfigFields'
    OrganizationConfigFields:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: organization config id
        domains:
          type: array
          description: organization domains
          items:
            type: string
    ApplicationConfig:
      required:
        - id
        - app_type_id
        - version
        - data
      type: object
      properties:
        id:
          type: string
        app_type_id:
          type: string
        org_id:
          type: string
        version:
          type: string
          description: conforms major.minor.patch format
        data:
          type: object
    LoginSession:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/LoginSessionFields'
        app_org:
          $ref: '#/components/schemas/ApplicationOrganization'
        auth_type:
          $ref: '#/components/schemas/AuthType'
        app_type:
          $ref: '#/components/schemas/ApplicationType'
        account_auth_type:
          $ref: '#/components/schemas/AccountAuthType'
          nullable: true
        device:
          $ref: '#/components/schemas/Device'
    LoginSessionFields:
      type: object
      properties:
        id:
          type: string
        anonymous:
          type: boolean
        identifier:
          type: string
        id_address:
          type: string
        access_token:
          type: string
        refresh_tokens:
          type: array
          items:
            type: string
        params:
          type: object
          additionalProperties: true
        state:
          type: string
        state_expires:
          type: string
          nullable: true
        mfa_attempts:
          type: integer
        date_refreshed:
          type: string
          nullable: true
        date_updated:
          type: string
          nullable: true
        date_created:
          type: string
    AuthType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AuthTypeFields'
    AuthTypeFields:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
          description: username or email or phone or illinois_oidc etc
        description:
          type: string
        is_external:
          type: boolean
          description: says if the users source is external - identity providers
        is_anonymous:
          type: boolean
          description: says if the auth type results in anonymous users
        use_credentials:
          type: boolean
          description: says if the auth type uses credentials
        ignore_mfa:
          type: boolean
          description: says if login using this auth type may bypass account MFA
        params:
          type: object
          additionalProperties: true
    Credential:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/CredentialFields'
        accounts_auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthType'
    CredentialFields:
      type: object
      properties:
        id:
          type: string
        value:
          type: object
    ServiceAccount:
      required:
        - account_id
        - name
        - app_id
        - org_id
        - permissions
        - first_party
      type: object
      properties:
        account_id:
          type: string
        name:
          type: string
        app_id:
          type: string
          nullable: true
        org_id:
          type: string
          nullable: true
        permissions:
          type: array
          items:
            type: string
        first_party:
          type: boolean
        creds:
          type: array
          items:
            $ref: '#/components/schemas/ServiceAccountCredential'
    AppOrgPair:
      required:
        - app_id
        - org_id
      type: object
      properties:
        app_id:
          type: string
          nullable: true
        org_id:
          type: string
          nullable: true
    ServiceAccountCredential:
      required:
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - static_token
            - signature
        params:
          type: object
          nullable: true
        date_created:
          readOnly: true
          type: string
    ServiceReg:
      required:
        - service_id
        - host
        - name
        - description
        - first_party
      type: object
      description: Full service registration record
      properties:
        service_id:
          type: string
        service_account_id:
          type: string
        host:
          type: string
        pub_key:
          $ref: '#/components/schemas/PubKey'
        name:
          type: string
        description:
          type: string
        info_url:
          type: string
        logo_url:
          type: string
        scopes:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ServiceScope'
        first_party:
          type: boolean
    AuthServiceReg:
      required:
        - service_id
        - host
      type: object
      description: Service registration record used for auth
      properties:
        service_id:
          type: string
        service_account_id:
          type: string
        host:
          type: string
        pub_key:
          $ref: '#/components/schemas/PubKey'
    PubKey:
      required:
        - key_pem
        - alg
      type: object
      properties:
        key_pem:
          type: string
        alg:
          type: string
    ServiceScope:
      required:
        - scope
        - required
      type: object
      properties:
        scope:
          type: string
        required:
          type: boolean
        explanation:
          description: Explanation displayed to users for why this scope is requested/required
          type: string
    APIKey:
      required:
        - app_id
        - key
      type: object
      description: API key record
      properties:
        id:
          type: string
        app_id:
          type: string
        key:
          type: string
    JWK:
      required:
        - kty
        - use
        - alg
        - kid
        - 'n'
        - e
      type: object
      description: JSON Web Key (JWK)
      properties:
        kty:
          type: string
          description: The "kty" (key type) parameter identifies the cryptographic algorithm family used with the key
          enum:
            - RSA
        use:
          type: string
          description: The "use" (public key use) parameter identifies the intended use of the public key
          enum:
            - sig
        alg:
          type: string
          description: The "alg" (algorithm) parameter identifies the algorithm intended for use with the key
          enum:
            - RS256
        kid:
          type: string
          description: The "kid" (key ID) parameter is used to match a specific key
        'n':
          type: string
          description: The modulus (2048 bit) of the key - Base64URL encoded.
        e:
          type: string
          description: The exponent of the key - Base64URL encoded
    JWKS:
      required:
        - keys
      type: object
      description: JSON Web Key Set (JWKS)
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JWK'
    OIDCDiscovery:
      required:
        - issuer
        - jwks_uri
      type: object
      description: OpenID Connect Discovery Metadata
      properties:
        issuer:
          type: string
        jwks_uri:
          type: string
    Account:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AccountFields'
        app_org:
          $ref: '#/components/schemas/ApplicationOrganization'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgRole'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgGroup'
        auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthType'
        preferences:
          type: object
        profile:
          $ref: '#/components/schemas/Profile'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    AccountFields:
      required:
        - id
      type: object
      properties:
        id:
          type: string
    Profile:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ProfileFields'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    ProfileFields:
      type: object
      properties:
        id:
          type: string
        photo_url:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        birth_year:
          type: integer
          nullable: true
        address:
          type: string
          nullable: true
        zip_code:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
    AccountAuthType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AccountAuthTypeFields'
        auth_type:
          $ref: '#/components/schemas/AuthType'
        account:
          $ref: '#/components/schemas/Account'
        credential:
          $ref: '#/components/schemas/Credential'
    AccountAuthTypeFields:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
        identifier:
          type: string
        params:
          type: object
          additionalProperties: true
          nullable: true
        active:
          type: boolean
        unverified:
          type: boolean
    Device:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/DeviceFields'
        account:
          $ref: '#/components/schemas/Account'
    DeviceFields:
      required:
        - id
        - type
      type: object
      properties:
        id:
          type: string
        device_id:
          type: string
        type:
          type: string
          enum:
            - mobile
            - web
            - desktop
            - other
        os:
          type: string
    _shared_req_Login:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - device
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - email
            - twilio_phone
            - illinois_oidc
            - anonymous
        app_type_identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        creds:
          anyOf:
            - $ref: '#/components/schemas/_shared_req_CredsEmail'
            - $ref: '#/components/schemas/_shared_req_CredsTwilioPhone'
            - $ref: '#/components/schemas/_shared_req_CredsOIDC'
            - $ref: '#/components/schemas/_shared_req_CredsAPIKey'
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_shared_req_ParamsEmail'
            - $ref: '#/components/schemas/_shared_req_ParamsOIDC'
            - $ref: '#/components/schemas/_shared_req_ParamsNone'
        device:
          $ref: '#/components/schemas/_shared_req_Login_Device'
        profile:
          $ref: '#/components/schemas/_shared_req_ProfileNullable'
        preferences:
          type: object
          nullable: true
    _shared_req_Login_Mfa:
      required:
        - api_key
        - account_id
        - session_id
        - state
        - identifier
        - type
        - code
      type: object
      properties:
        api_key:
          type: string
        account_id:
          type: string
        session_id:
          type: string
        state:
          type: string
        identifier:
          type: string
        type:
          type: string
          enum:
            - email
            - phone
            - totp
            - recovery
        code:
          type: string
    _shared_req_Login_Device:
      required:
        - type
      type: object
      description: Client device
      properties:
        device_id:
          type: string
        type:
          type: string
          enum:
            - mobile
            - web
            - desktop
            - other
        os:
          type: string
    _shared_req_LoginUrl:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - redirect_uri
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - illinois_oidc
        app_type_identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        redirect_uri:
          type: string
    _shared_req_Refresh:
      required:
        - api_key
        - refresh_token
      type: object
      properties:
        api_key:
          type: string
        refresh_token:
          type: string
    _shared_req_Mfa:
      required:
        - identifier
        - type
      type: object
      properties:
        identifier:
          type: string
        type:
          type: string
          enum:
            - email
            - phone
            - totp
        code:
          type: string
    _shared_req_AccountCheck:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - user_identifier
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - username
            - email
            - twilio_phone
            - illinois_oidc
            - anonymous
        app_type_identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        user_identifier:
          type: string
    _shared_req_CredsEmail:
      required:
        - email
        - password
      type: object
      description: Auth login creds for auth_type="email"
      properties:
        email:
          type: string
        password:
          type: string
    _shared_req_CredsTwilioPhone:
      type: object
      description: Auth login creds for auth_type="twilio_phone"
      required:
        - phone
      properties:
        phone:
          type: string
        code:
          type: string
    _shared_req_CredsOIDC:
      type: string
      description: |
        Auth login creds for auth_type="oidc" (or variants)
          - full redirect URI received from OIDC provider
    _shared_req_CredsAPIKey:
      type: object
      description: Auth login creds for auth_type="anonymous"
      properties:
        anonymous_id:
          type: string
    _shared_req_ParamsEmail:
      type: object
      description: Auth login params for auth_type="email"
      properties:
        confirm_password:
          type: string
          description: This should match the `creds` password field when sign_up=true. This should be verified on the client side as well to reduce invalid requests.
        sign_up:
          type: boolean
          default: false
    _shared_req_ParamsOIDC:
      type: object
      description: Auth login params for auth_type="oidc" (or variants)
      properties:
        redirect_uri:
          type: string
        pkce_verifier:
          type: string
    _shared_req_ParamsNone:
      type: object
      description: Auth login request params for unlisted auth_types (None)
      nullable: true
    _shared_req_Profile:
      type: object
      properties:
        photo_url:
          type: string
          nullable: true
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        birth_year:
          type: integer
          nullable: true
        address:
          type: string
          nullable: true
        zip_code:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
    _shared_req_ProfileNullable:
      type: object
      nullable: true
      properties:
        photo_url:
          type: string
          nullable: true
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        birth_year:
          type: integer
          nullable: true
        address:
          type: string
          nullable: true
        zip_code:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
    _shared_req_ParamsSetEmailCredential:
      required:
        - new_password
        - confirm_password
      type: object
      properties:
        new_password:
          type: string
        confirm_password:
          type: string
    _shared_res_Login:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/_shared_res_RokwireToken'
        account:
          $ref: '#/components/schemas/_shared_res_Account'
        params:
          type: object
          nullable: true
          anyOf:
            - type: object
              description: Auth login response params for auth_type="oidc" (or variants)
              properties:
                oidc_token:
                  type: object
                  properties:
                    id_token:
                      type: string
                    access_token:
                      type: string
                    refresh_token:
                      type: string
                    token_type:
                      type: string
                redirect_uri:
                  type: string
            - type: object
              description: Auth login response params for auth_type="anonymous"
              properties:
                anonymous_id:
                  type: string
            - type: object
              description: Auth login response params for unlisted auth_types (None)
              nullable: true
        message:
          type: string
    _shared_res_Login_Mfa:
      required:
        - enrolled
        - account_id
        - session_id
        - state
      type: object
      properties:
        enrolled:
          type: array
          items:
            $ref: '#/components/schemas/_shared_res_Mfa'
        account_id:
          type: string
        session_id:
          type: string
        state:
          type: string
        params:
          type: object
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/_shared_res_Login/properties/params/anyOf/0'
            - $ref: '#/components/schemas/_shared_res_Login/properties/params/anyOf/1'
            - $ref: '#/components/schemas/_shared_res_Login/properties/params/anyOf/2'
    _shared_res_LoginUrl:
      required:
        - login_url
      type: object
      properties:
        login_url:
          type: string
        params:
          type: object
          description: Params to be submitted with 'login' request (if necessary)
    _shared_res_Refresh:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/_shared_res_RokwireToken'
        params:
          type: object
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/_shared_res_Login/properties/params/anyOf/0'
            - $ref: '#/components/schemas/_shared_res_Login/properties/params/anyOf/1'
            - $ref: '#/components/schemas/_shared_res_Login/properties/params/anyOf/2'
    _shared_res_Account:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: '#/components/schemas/ProfileFields'
        preferences:
          type: object
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionFields'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgRoleFields'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgGroupFields'
        auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthTypeFields'
    _shared_res_AccountCheck:
      type: boolean
    _shared_res_Mfa:
      type: object
      properties:
        type:
          type: string
        verified:
          type: boolean
        params:
          type: object
    _shared_res_RokwireToken:
      type: object
      properties:
        access_token:
          description: The user's access token to be provided to authorize access to ROKWIRE APIs
          type: string
        refresh_token:
          description: A refresh token that can be used to get a new access token once the one provided expires
          type: string
        token_type:
          description: The type of the provided tokens to be specified when they are sent in the "Authorization" header
          type: string
          enum:
            - Bearer
    _shared_res_LoginSession:
      type: object
      properties:
        id:
          type: string
        auth_type_code:
          type: string
        app_type_id:
          type: string
        app_type_identifier:
          type: string
        anonymous:
          type: boolean
        identifier:
          type: string
        account_auth_type_id:
          type: string
        account_auth_type_identifier:
          type: string
        device_id:
          type: string
        ip_address:
          type: string
        refresh_tokens_count:
          type: integer
        state:
          type: string
        state_expires:
          type: string
          nullable: true
        mfa_attempts:
          type: integer
        date_refreshed:
          type: string
          nullable: true
        date_updated:
          type: string
          nullable: true
        date_created:
          type: string
    _services_req_account_auth-type-link:
      required:
        - auth_type
        - app_type_identifier
        - creds
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - email
            - twilio_phone
            - illinois_oidc
            - username
        app_type_identifier:
          type: string
        creds:
          anyOf:
            - $ref: '#/components/schemas/_shared_req_CredsEmail'
            - $ref: '#/components/schemas/_shared_req_CredsTwilioPhone'
            - $ref: '#/components/schemas/_shared_req_CredsOIDC'
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_shared_req_ParamsEmail'
            - $ref: '#/components/schemas/_shared_req_ParamsOIDC'
            - $ref: '#/components/schemas/_shared_req_ParamsNone'
    _services_req_account_auth-type-unlink:
      required:
        - auth_type
        - app_type_identifier
        - identifier
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - email
            - twilio_phone
            - illinois_oidc
            - username
        app_type_identifier:
          type: string
        identifier:
          type: string
    _services_res_account_auth-type-link:
      required:
        - auth_types
      type: object
      properties:
        message:
          type: string
          nullable: true
        auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthTypeFields'
    _services_req_credential_update:
      required:
        - account_auth_type_id
      type: object
      properties:
        account_auth_type_id:
          type: string
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_shared_req_ParamsSetEmailCredential'
    _services_req_credential_send-verify:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - identifier
      type: object
      properties:
        identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        app_type_identifier:
          type: string
        auth_type:
          type: string
          enum:
            - email
    _services_req_credential_forgot_initiate:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - identifier
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - email
        app_type_identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        identifier:
          type: string
    _services_req_credential_forgot_complete:
      required:
        - credential_id
        - reset_code
      type: object
      properties:
        credential_id:
          type: string
        reset_code:
          type: string
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_shared_req_ParamsSetEmailCredential'
    _services_req_authorize-service:
      required:
        - service_id
      type: object
      properties:
        service_id:
          type: string
        approved_scopes:
          description: Scopes to be granted to this service in this and future tokens. Replaces existing scopes if present.
          type: array
          items:
            type: string
    _services_res_authorize-service:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          description: The type of the provided tokens to be specified when they are sent in the "Authorization" header
          type: string
          enum:
            - Bearer
        approved_scopes:
          type: array
          items:
            type: string
        service_reg:
          $ref: '#/components/schemas/ServiceReg'
    _services_req_service-accounts_params:
      required:
        - auth_type
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - static_token
            - signature
        creds:
          $ref: '#/components/schemas/_services_service-accounts_CredsStaticToken'
    _services_req_service-accounts_access-token:
      required:
        - account_id
        - app_id
        - org_id
        - auth_type
      type: object
      properties:
        account_id:
          type: string
        app_id:
          nullable: true
          type: string
        org_id:
          nullable: true
          type: string
        auth_type:
          type: string
          enum:
            - static_token
            - signature
        creds:
          $ref: '#/components/schemas/_services_service-accounts_CredsStaticToken'
    _services_req_service-accounts_access-tokens:
      required:
        - account_id
        - auth_type
      type: object
      properties:
        account_id:
          type: string
        auth_type:
          type: string
          enum:
            - static_token
            - signature
        creds:
          $ref: '#/components/schemas/_services_service-accounts_CredsStaticToken'
    _services_res_service-accounts_access-tokens:
      required:
        - app_id
        - org_id
        - token
      type: object
      properties:
        app_id:
          nullable: true
          type: string
        org_id:
          nullable: true
          type: string
        token:
          $ref: '#/components/schemas/_shared_res_RokwireToken'
    _services_service-accounts_CredsStaticToken:
      required:
        - token
      type: object
      description: Service account token for auth_type="static_token"
      properties:
        token:
          type: string
    _services_req_application_configs:
      required:
        - app_type_identifier
        - version
        - api_key
      type: object
      properties:
        app_type_identifier:
          type: string
        version:
          type: string
          description: conforms major.minor.patch format
        api_key:
          type: string
    _services_req_application_org-configs:
      required:
        - app_type_identifier
        - version
      type: object
      properties:
        app_type_identifier:
          type: string
        version:
          type: string
          description: conforms major.minor.patch format
    _admin_res_app-token:
      required:
        - token
      type: object
      properties:
        token:
          type: string
    _admin_req_create-application_role:
      required:
        - name
        - description
        - permissions
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    _admin_req_create-application_group:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
    _admin_req_add-accounts-to-group:
      required:
        - group_id
        - account_ids
      type: object
      properties:
        group_id:
          type: string
        account_ids:
          type: array
          items:
            type: string
    _admin_req_remove-account-from-group:
      required:
        - group_id
        - account_ids
      type: object
      properties:
        group_id:
          type: string
        account_ids:
          type: array
          items:
            type: string
    _admin_req_grant-roles-to-account:
      required:
        - account_id
        - role_ids
      type: object
      properties:
        account_id:
          type: string
        role_ids:
          type: array
          items:
            type: string
    _admin_req_revoke-roles-from-account:
      required:
        - account_id
        - role_ids
      type: object
      properties:
        account_id:
          type: string
        role_ids:
          type: array
          items:
            type: string
    _admin_req_grant-permissions:
      required:
        - account_id
        - permissions
      type: object
      properties:
        account_id:
          type: string
        permissions:
          type: array
          items:
            type: string
    _admin_req_revoke-permissions:
      required:
        - account_id
        - permissions
      type: object
      properties:
        account_id:
          type: string
        permissions:
          type: array
          items:
            type: string
    _admin_req_grant-permissions-to-role:
      required:
        - role_id
        - permissions
      type: object
      properties:
        role_id:
          type: string
        permissions:
          type: array
          items:
            type: string
    _system_req_create-Organization:
      required:
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _system_res_create_Organization:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _system_req_update_Organization:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _system_res_update_Organization:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _system_req_get_Organization:
      required:
        - id
      properties:
        id:
          readOnly: true
          type: string
    _system_res_get_Organization:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _system_res_get_Organizations:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _system_req_create_Application:
      required:
        - name
        - multi_tenant
        - admin
        - shared_identities
      type: object
      properties:
        name:
          type: string
        multi_tenant:
          type: boolean
        admin:
          type: boolean
        shared_identities:
          type: boolean
        application_types:
          type: array
          items:
            required:
              - identifier
            type: object
            properties:
              identifier:
                type: string
              name:
                type: string
              versions:
                type: array
                items:
                  type: string
    _system_req_get_Application:
      required:
        - id
      type: string
      properties:
        id:
          readOnly: true
          type: string
    _system_res_get_Application:
      required:
        - id
        - name
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        multi_tenant:
          type: boolean
        shared_identities:
          type: boolean
        max_login_session_duration:
          description: The maximum allowed duration (in hours) of a user's login session for this application
          type: integer
        organization:
          $ref: '#/components/schemas/ApplicationOrganization'
        applicationType:
          $ref: '#/components/schemas/ApplicationType'
    _system_res_get_Applications:
      required:
        - id
        - name
        - multi_tenant
        - shared_identities
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        multi_tenant:
          type: boolean
        shared_identities:
          type: boolean
        max_login_session_duration:
          description: The maximum allowed duration (in hours) of a user's login session for this application
          type: integer
        application_types:
          $ref: '#/components/schemas/ApplicationTypeFields'
    _system_req_permissions:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        service_id:
          type: string
        assigners:
          type: array
          description: permissions that could assign current permission to accounts
          items:
            type: string
    _system_req_application-roles:
      required:
        - name
        - app_id
        - description
        - permissions
      type: object
      properties:
        name:
          type: string
        app_id:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    _system_req_account-permissions:
      required:
        - account_id
        - app_id
        - permissions
      type: object
      properties:
        account_id:
          type: string
        app_id:
          type: string
        permissions:
          type: array
          items:
            type: string
    _system_req_create_auth_type:
      type: object
      required:
        - code
        - description
        - is_external
        - is_anonymous
        - use_credentials
        - ignore_mfa
      properties:
        code:
          type: string
        description:
          type: string
        is_external:
          type: boolean
        is_anonymous:
          type: boolean
        use_credentials:
          type: boolean
        ignore_mfa:
          type: boolean
        params:
          type: object
          additionalProperties: true
    _system_req_update_auth_type:
      type: object
      required:
        - code
        - description
        - is_external
        - is_anonymous
        - use_credentials
        - ignore_mfa
      properties:
        code:
          type: string
        description:
          type: string
        is_external:
          type: boolean
        is_anonymous:
          type: boolean
        use_credentials:
          type: boolean
        ignore_mfa:
          type: boolean
        params:
          type: object
          additionalProperties: true
    _system_req_account-roles:
      required:
        - account_id
        - app_id
        - role_ids
      type: object
      properties:
        account_id:
          type: string
        app_id:
          type: string
        role_ids:
          type: array
          items:
            type: string
    _system_req_create_ApplicationConfig_Request:
      required:
        - app_type_id
        - version
        - data
      type: object
      properties:
        app_type_id:
          type: string
        org_id:
          type: string
        version:
          type: string
          description: conforms major.minor.patch format
        data:
          type: object
    _system_req_create_service-account:
      required:
        - app_id
        - org_id
      type: object
      properties:
        account_id:
          type: string
        name:
          type: string
        app_id:
          type: string
          nullable: true
        org_id:
          type: string
          nullable: true
        permissions:
          type: array
          items:
            type: string
        first_party:
          type: boolean
        creds:
          type: array
          items:
            $ref: '#/components/schemas/ServiceAccountCredential'
    _system_req_update_service-account:
      required:
        - name
        - permissions
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
