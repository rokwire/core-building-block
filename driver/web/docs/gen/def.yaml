openapi: 3.0.3
info:
  title: Rokwire Core Building Block API
  description: Core Building Block API Documentation
  version: 1.12.0
servers:
  - url: 'https://api.rokwire.illinois.edu/core'
    description: Production server
  - url: 'https://api-test.rokwire.illinois.edu/core'
    description: Test server
  - url: 'https://api-dev.rokwire.illinois.edu/core'
    description: Development server
  - url: 'http://localhost/core'
    description: Local server
tags:
  - name: Services
    description: Clients applications APIs.
  - name: Admin
    description: Clients administration applications APIs.
  - name: Enc
    description: APIs consumed by the Encryption building block.
  - name: BBs
    description: APIs consumed by the platform building blocks.
  - name: Third-Party Services
    description: APIs consumed by third-party services.
  - name: System
    description: System APIs.
paths:
  /services/auth/login:
    post:
      tags:
        - Services
      summary: Login
      description: |
        Login using credentials to retrieve access token, refresh token, and user data
      requestBody:
        description: |
          User credential details and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_shared_Login'
            examples:
              email-sign_in:
                summary: Email - sign in
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire.safercommunity",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@test.com", 
                      "password": "test12345"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              email-sign_up:
                summary: Email - sign up
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire.safercommunity",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@test.com", 
                      "password": "test12345"
                    },
                    "params":{
                        "sign_up":true,
                        "confirm_password": "test12345"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              phone:
                summary: Phone - sign in OR sign up
                value: |
                  {
                    "auth_type": "twilio_phone",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "phone": "+12223334444", 
                      "code": "123456"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              illinois_oidc:
                summary: Illinois OIDC login
                value: |
                  {
                    "auth_type": "illinois_oidc",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": "https://redirect.example.com?code=ai324uith8gSEefesEguorgwsf43",
                    "params": {
                      "redirect_uri": "https://redirect.example.com",
                      "pkce_verifier": "w4iuhfq0u43hfq38ghn3gnSFSFiqp3ugnpugnqiprgUGNPINfsdoirpgia"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              anonymous:
                summary: Anonymous login
                value: |
                  {
                    "auth_type": "anonymous",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "anonymous_id": "dbb5ea5d-6c6c-44b8-9952-7ebf0e844beb"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_shared_Login'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - invalid
                      - unverified
                      - verification-expired
                      - already-exists
                      - not-found
                      - internal-server-error
                    description: |
                      - `invalid`: Invalid credentials
                      - `unverified`: Unverified credentials
                      - `verification-expired`: Credentials verification expired. The verification is restarted
                      - `already-found`: Account already exists when `sign-up=true`
                      - `not-found`: Account could not be found when `sign-up=false`
                      - `internal-server-error`: An undefined error occurred
                  message:
                    type: string
  /services/auth/refresh:
    post:
      tags:
        - Services
      summary: Refresh
      description: |
        Refresh access token using a refresh token
      requestBody:
        description: |
          Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_shared_Refresh'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_shared_Refresh'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/login-url:
    post:
      tags:
        - Services
      summary: Get SSO login url
      description: |
        Retrieve a pre-formatted SSO login URL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_shared_LoginUrl'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_shared_LoginUrl'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/credential/verify:
    get:
      tags:
        - Services
      summary: Validate verification code
      description: |
        Validates verification code to verify account ownership
      parameters:
        - name: id
          in: query
          description: Credential ID
          required: true
          style: form
          explode: false
          schema:
            type: string
        - name: code
          in: query
          description: Verification code
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Successfully verified code
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/credential/forgot/initiate:
    post:
      tags:
        - Services
      summary: Initiate reset credential for a given identifier
      description: |
        Email auth type:
        Sends the reset password code for a given identifier
        Generates a reset code and expiry and sends it to the given identifier 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_credential_forgot_initiate_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/credential/forgot/complete:
    post:
      tags:
        - Services
      summary: Complete resetting forgotten credential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_credential_forgot_complete_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/credential/update:
    post:
      tags:
        - Services
      summary: Reset a credential from client application
      description: |
        Needs user auth token for authorization

        **Auth:** Requires token from direct user authentication from recent login
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_credential_update_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/account-exists:
    post:
      tags:
        - Services
      summary: Check if an account already exists
      description: |
        Account exists checks if an account exists for the provided user identifier and auth type
      requestBody:
        description: |
          Account information to be checked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_account-exists_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_account-exists_Response'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/authorize-service:
    post:
      tags:
        - Services
      summary: Authorize service
      description: |
        Authorize a third-party service and get a scoped access token that can be used to access its APIs

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_authorize-service_Request'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_authorize-service_Response'
              examples:
                authorized:
                  summary: Service authorized
                  value: |
                    {
                      "access_token": "string",
                      "token_type": "Bearer",
                      "approved_scopes": [
                        "string"
                      ]
                    }
                unauthorized:
                  summary: Service unauthorized
                  value: |
                    {
                      "service_reg": {
                        "service_id": "string",
                        "host": "string",
                        "pub_key": {
                          "key_pem": "string",
                          "alg": "string"
                        },
                        "name": "string",
                        "description": "string",
                        "info_url": "string",
                        "logo_url": "string",
                        "scopes": [
                          {
                            "scope": "string",
                            "required": true,
                            "explanation": "string"
                          }
                        ],
                        "first_party": true
                      }
                    }
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/service-regs:
    get:
      tags:
        - Services
      summary: Get service registrations
      description: |
        Returns service registration records

        **Auth:** Requires auth token
      security:
        - bearerAuth: []
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/account:
    delete:
      tags:
        - Services
      summary: Delete user account
      description: |
        Deletes a user account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    get:
      tags:
        - Services
      summary: Get user account
      description: |
        Get the user account

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_shared_Account'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/account/preferences:
    put:
      tags:
        - Services
      summary: Update account preferences
      description: |
        Updates account preferences

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      requestBody:
        description: Account preferences
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    get:
      tags:
        - Services
      summary: Get preferences
      description: |
        Returns a user preferences

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/account/profile:
    get:
      tags:
        - Services
      summary: Get user profile
      description: |
        Returns a user profile

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileFields'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Services
      summary: Update user profile
      description: |
        Updates a user profile

        **Auth:** Requires user auth token
      security:
        - bearerAuth: []
      requestBody:
        description: Profile update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_shared_Profile'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/test:
    get:
      tags:
        - Services
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /admin/auth/login:
    post:
      tags:
        - Admin
      summary: Login
      description: |
        Login using credentials to retrieve access token, refresh token, and user data
      requestBody:
        description: |
          User credential details and parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_shared_Login'
            examples:
              email-sign_in:
                summary: Email - sign in
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire.safercommunity",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@test.com", 
                      "password": "test12345"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              email-sign_up:
                summary: Email - sign up
                value: |
                  {
                    "auth_type": "email",
                    "app_type_identifier": "edu.illinois.rokwire.safercommunity",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "email": "test@test.com", 
                      "password": "test12345"
                    },
                    "params":{
                        "sign_up":true,
                        "confirm_password": "test12345"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              phone:
                summary: Phone - sign in OR sign up
                value: |
                  {
                    "auth_type": "twilio_phone",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "phone": "+12223334444", 
                      "code": "123456"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              illinois_oidc:
                summary: Illinois OIDC login
                value: |
                  {
                    "auth_type": "illinois_oidc",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": "https://redirect.example.com?code=ai324uith8gSEefesEguorgwsf43",
                    "params": {
                      "redirect_uri": "https://redirect.example.com",
                      "pkce_verifier": "w4iuhfq0u43hfq38ghn3gnSFSFiqp3ugnpugnqiprgUGNPINfsdoirpgia"
                    },
                    "preferences":{
                        "key1":"value1",
                        "key2":"value2"
                    },
                    "profile":{
                      "address": "address",
                      "birth_year": 1990,
                      "country": "county",
                      "email": "email",
                      "first_name": "first name",
                      "last_name": "last name",
                      "phone": "+000000000000",
                      "photo_url": "photo url",
                      "state": "state",
                      "zip_code": "zip code"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
              anonymous:
                summary: Anonymous login
                value: |
                  {
                    "auth_type": "anonymous",
                    "app_type_identifier": "edu.illinois.rokwire",
                    "org_id": "0a2eff20-e2cd-11eb-af68-60f81db5ecc0",
                    "api_key": "95a463e3-2ce8-450b-ba75-d8506b874738",
                    "creds": {
                      "anonymous_id": "dbb5ea5d-6c6c-44b8-9952-7ebf0e844beb"
                    },
                    "device": {
                      "type": "mobile",
                      "device_id": "5555",
                      "os": "Android"
                    }
                  }
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_shared_Login'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/auth/refresh:
    post:
      tags:
        - Admin
      summary: Refresh
      description: |
        Refresh access token using a refresh token
      requestBody:
        description: |
          Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_shared_Refresh'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_shared_Refresh'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/auth/login-url:
    post:
      tags:
        - Admin
      summary: Get SSO login url
      description: |
        Retrieve a pre-formatted SSO login URL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_shared_LoginUrl'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_res_shared_LoginUrl'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /enc/test:
    get:
      tags:
        - Enc
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /bbs/test:
    get:
      tags:
        - BBs
      summary: Test API..
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /bbs/service-regs:
    get:
      tags:
        - BBs
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /tps/service-regs:
    get:
      tags:
        - Third-Party Services
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /tps/auth-keys:
    get:
      tags:
        - Third-Party Services
      summary: Get auth public key
      description: |
        Returns auth public key in JWKS format
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/global-config:
    get:
      deprecated: true
      tags:
        - System
      summary: Get global config
      description: |
        Gives the system global config

        **Auth:** Requires auth token with `config_admin` permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfig'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      deprecated: true
      tags:
        - System
      summary: Create global config
      description: |
        Creates the system global config

        **Auth:** Requires auth token with `config_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      deprecated: true
      tags:
        - System
      summary: Update global config
      description: |
        Updates the system global config

        **Auth:** Requires auth token with `config_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/system/organizations/{id}':
    put:
      deprecated: true
      tags:
        - System
      summary: Update organization
      description: |
        Updates organization

         **Auth:** Requires auth token with `org_admin` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the organization that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: update one organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_update_Organization_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    get:
      deprecated: true
      tags:
        - System
      summary: Get organization
      description: |
        Gets organization

        **Auth:** Requires auth token with `org_admin` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the organization
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_req_get_Organization_Request'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal error
  /system/organizations:
    get:
      deprecated: true
      tags:
        - System
      summary: Get organizations
      description: |
        Gets organizations

        **Auth:** Requires auth token with `org_admin` permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_res_get_Organizations_Response'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      deprecated: true
      tags:
        - System
      summary: Create organization
      description: |
        Creates organization

        **Auth:** Requires auth token with `org_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        description: creates one organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_create-Organization_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/service-regs:
    get:
      deprecated: true
      tags:
        - System
      summary: Get service registrations
      description: |
        Returns service registration records

        **Auth:** Requires auth token with `service_admin` permission
      security:
        - bearerAuth: []
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      deprecated: true
      tags:
        - System
      summary: Register service
      description: |
        Creates a new service registration

        The "service_id" of the registration must not match an existing registration  

        **Auth:** Requires auth token with `service_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        description: service registration record to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReg'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      deprecated: true
      tags:
        - System
      summary: Update service registration
      description: |
        Update an existing service registration

        The "service_id" of the registration must match an existing registration

        **Auth:** Requires auth token with `service_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Service registration record update to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReg'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      deprecated: true
      tags:
        - System
      summary: Deregister service
      description: |
        Deletes an existing service registration record

        **Auth:** Requires auth token with `service_admin` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          description: The service ID of the registration to delete
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/system/applications/{id}':
    get:
      deprecated: true
      tags:
        - System
      summary: Get application
      description: |
        Gets application

        **Auth:** Requires auth token with `app_admin` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the application
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_req_get_Application_Request'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal error
  /system/applications:
    get:
      deprecated: true
      tags:
        - System
      summary: Get applications
      description: |
        Gets applications

        **Auth:** Requires auth token with `app_admin` permission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/_res_get_Applications_Response'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      deprecated: true
      tags:
        - System
      summary: Create application
      description: |
        Creates application

        **Auth:** Requires auth token with `app_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        description: creates one application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_create_Application_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/permissions:
    post:
      deprecated: true
      tags:
        - System
      summary: Create permission
      description: |
        Creates permission

        **Auth:** Requires auth token with `all_permission` or 'update_permission" permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_permissions_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      deprecated: true
      tags:
        - System
      summary: Updates permission
      description: |
        Updates permission

        **Auth:** Requires auth token with `all_permission` or 'update_permission" permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_permissions_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/application-roles:
    post:
      deprecated: true
      tags:
        - System
      summary: Create application role
      description: |
        Creates application role

        **Auth:** Requires auth token with `auth_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Application role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_application-roles_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/application-api-keys:
    get:
      deprecated: true
      tags:
        - System
      summary: Get application API keys
      description: |
        Returns all API key records for a given app ID

        **Auth:** Requires auth token with `get_api-keys` permission
      security:
        - bearerAuth: []
      parameters:
        - name: app_id
          in: query
          description: The app ID of the API keys to return
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKey'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/account/permissions:
    put:
      deprecated: true
      tags:
        - System
      summary: Grant account permissions
      description: |
        Grant account permissions

        **Auth:** Requires auth token with `auth_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Permissions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_account-permissions_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/account/roles:
    put:
      deprecated: true
      tags:
        - System
      summary: Grant account roles
      description: |
        Grant account roles

        **Auth:** Requires auth token with `auth_admin` permission
      security:
        - bearerAuth: []
      requestBody:
        description: Roles
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_req_account-roles_Request'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /system/api-keys:
    get:
      deprecated: true
      tags:
        - System
      summary: Get API key
      description: |
        Returns API key record

        **Auth:** Requires auth token with `get_api-keys` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          description: The ID of the API key to return
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      deprecated: true
      tags:
        - System
      summary: Create API key
      description: |
        Creates a new API key record

        **Auth:** Requires auth token with `update_api-keys` permission
      security:
        - bearerAuth: []
      requestBody:
        description: API key record to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
            example: |
              {
                "app_id": "string",
                "key": "string"
              }
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      deprecated: true
      tags:
        - System
      summary: Update API key
      description: |
        Update an existing API key record

        Must include the "id" field to identify which key is to be udpated

        **Auth:** Requires auth token with `update_api-keys` permission
      security:
        - bearerAuth: []
      requestBody:
        description: API key record update to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      deprecated: true
      tags:
        - System
      summary: Delete API key
      description: |
        Deletes an existing API key record

        **Auth:** Requires auth token with `update_api-keys` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          description: The ID of the API key to delete
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /version:
    get:
      summary: Get service version
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: v1.1.0
  /.well-known/openid-configuration:
    get:
      summary: OpenID Connect Discovery
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCDiscovery'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GlobalConfig:
      required:
        - setting
      type: object
      properties:
        setting:
          type: string
    Application:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationFields'
        types:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationType'
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationOrganization'
    ApplicationFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        multi_tenant:
          type: boolean
        requires_own_users:
          type: boolean
        max_login_session_duration:
          description: The maximum allowed duration (in hours) of a user's login session for this application
          type: integer
    ApplicationType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ApplicationTypeFields'
        application:
          $ref: '#/components/schemas/Application'
    ApplicationTypeFields:
      required:
        - id
        - identifier
      type: object
      properties:
        id:
          type: string
        identifier:
          type: string
        name:
          type: string
        versions:
          type: array
          items:
            type: string
    ApplicationOrganization:
      type: object
      properties:
        id:
          type: string
        application:
          $ref: '#/components/schemas/Application'
        organization:
          $ref: '#/components/schemas/Organization'
        TODO:
          type: string
    Permission:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/PermissionFields'
    PermissionFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        service_id:
          type: string
        assigners:
          type: array
          items:
            type: string
    AppOrgRole:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AppOrgRoleFields'
        application:
          $ref: '#/components/schemas/Application'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    AppOrgRoleFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        system:
          type: boolean
    AppOrgGroup:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AppOrgGroupFields'
        application:
          $ref: '#/components/schemas/Application'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgRole'
    AppOrgGroupFields:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        system:
          type: boolean
    Organization:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/OrganizationFields'
        config:
          $ref: '#/components/schemas/OrganizationConfig'
    OrganizationFields:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
    OrganizationConfig:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/OrganizationConfigFields'
    OrganizationConfigFields:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: organization config id
        domains:
          type: array
          description: organization domains
          items:
            type: string
    LoginSession:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/LoginSessionFields'
        app_org:
          $ref: '#/components/schemas/ApplicationOrganization'
        auth_type:
          $ref: '#/components/schemas/AuthType'
        app_type:
          $ref: '#/components/schemas/ApplicationType'
        account_auth_type:
          $ref: '#/components/schemas/AccountAuthType'
          nullable: true
        device:
          $ref: '#/components/schemas/Device'
    LoginSessionFields:
      type: object
      properties:
        id:
          type: string
        anonymous:
          type: boolean
        identifier:
          type: string
        id_address:
          type: string
        access_token:
          type: string
        refresh_token:
          type: string
        params:
          type: object
          additionalProperties: true
        expires:
          type: string
        date_updated:
          type: string
          nullable: true
        date_created:
          type: string
    AuthType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AuthTypeFields'
    AuthTypeFields:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
        description:
          type: string
        is_external:
          type: boolean
        params:
          type: object
          additionalProperties: true
    Credential:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/CredentialFields'
        accounts_auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthType'
    CredentialFields:
      type: object
      properties:
        id:
          type: string
        value:
          type: object
    ServiceReg:
      required:
        - service_id
        - host
        - name
        - description
        - first_party
      type: object
      description: Full service registration record
      properties:
        service_id:
          type: string
        host:
          type: string
        pub_key:
          $ref: '#/components/schemas/PubKey'
        name:
          type: string
        description:
          type: string
        info_url:
          type: string
        logo_url:
          type: string
        scopes:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ServiceScope'
        first_party:
          type: boolean
    AuthServiceReg:
      required:
        - service_id
        - host
      type: object
      description: Service registration record used for auth
      properties:
        service_id:
          type: string
        host:
          type: string
        pub_key:
          $ref: '#/components/schemas/PubKey'
    PubKey:
      required:
        - key_pem
        - alg
      type: object
      properties:
        key_pem:
          type: string
        alg:
          type: string
    ServiceScope:
      required:
        - scope
        - required
      type: object
      properties:
        scope:
          type: string
        required:
          type: boolean
        explanation:
          description: Explanation displayed to users for why this scope is requested/required
          type: string
    APIKey:
      required:
        - app_id
        - key
      type: object
      description: API key record
      properties:
        id:
          type: string
        app_id:
          type: string
        key:
          type: string
    JWK:
      required:
        - kty
        - use
        - alg
        - kid
        - 'n'
        - e
      type: object
      description: JSON Web Key (JWK)
      properties:
        kty:
          type: string
          description: The "kty" (key type) parameter identifies the cryptographic algorithm family used with the key
          enum:
            - RSA
        use:
          type: string
          description: The "use" (public key use) parameter identifies the intended use of the public key
          enum:
            - sig
        alg:
          type: string
          description: The "alg" (algorithm) parameter identifies the algorithm intended for use with the key
          enum:
            - RS256
        kid:
          type: string
          description: The "kid" (key ID) parameter is used to match a specific key
        'n':
          type: string
          description: The modulus (2048 bit) of the key - Base64URL encoded.
        e:
          type: string
          description: The exponent of the key - Base64URL encoded
    JWKS:
      required:
        - keys
      type: object
      description: JSON Web Key Set (JWKS)
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JWK'
    OIDCDiscovery:
      required:
        - issuer
        - jwks_uri
      type: object
      description: OpenID Connect Discovery Metadata
      properties:
        issuer:
          type: string
        jwks_uri:
          type: string
    Account:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AccountFields'
        app_org:
          $ref: '#/components/schemas/ApplicationOrganization'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgRole'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgGroup'
        auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthType'
        preferences:
          type: object
        profile:
          $ref: '#/components/schemas/Profile'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    AccountFields:
      required:
        - id
      type: object
      properties:
        id:
          type: string
    Profile:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/ProfileFields'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    ProfileFields:
      type: object
      properties:
        id:
          type: string
        photo_url:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        birth_year:
          type: integer
          nullable: true
        address:
          type: string
          nullable: true
        zip_code:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
    AccountAuthType:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AccountAuthTypeFields'
        auth_type:
          $ref: '#/components/schemas/AuthType'
        account:
          $ref: '#/components/schemas/Account'
        credential:
          $ref: '#/components/schemas/Credential'
    AccountAuthTypeFields:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
        identifier:
          type: string
        params:
          type: object
          additionalProperties: true
          nullable: true
        active:
          type: boolean
        active_2fa:
          type: boolean
    Device:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/DeviceFields'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    DeviceFields:
      required:
        - id
        - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - mobile
            - web
            - desktop
            - other
        os:
          type: string
    _req_shared_Login:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - device
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - username
            - email
            - twilio_phone
            - illinois_oidc
            - anonymous
        app_type_identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        creds:
          anyOf:
            - $ref: '#/components/schemas/_req_shared_Login_CredsEmail'
            - $ref: '#/components/schemas/_req_shared_Login_CredsTwilioPhone'
            - $ref: '#/components/schemas/_req_shared_Login_CredsOIDC'
            - $ref: '#/components/schemas/_req_shared_Login_CredsAPIKey'
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_req_shared_Login_ParamsEmail'
            - $ref: '#/components/schemas/_req_shared_Login_ParamsOIDC'
            - $ref: '#/components/schemas/_req_shared_Login_ParamsNone'
        device:
          $ref: '#/components/schemas/_req_shared_Login_Device'
        profile:
          $ref: '#/components/schemas/_req_shared_ProfileNullable'
        preferences:
          type: object
          nullable: true
    _req_shared_Login_CredsEmail:
      required:
        - email
        - password
      type: object
      description: Auth login creds for auth_type="email"
      properties:
        email:
          type: string
        password:
          type: string
    _req_shared_Login_CredsTwilioPhone:
      type: object
      description: Auth login creds for auth_type="twilio_phone"
      required:
        - phone
      properties:
        phone:
          type: string
        code:
          type: string
    _req_shared_Login_CredsOIDC:
      type: string
      description: |
        Auth login creds for auth_type="oidc" (or variants)
          - full redirect URI received from OIDC provider
    _req_shared_Login_CredsAPIKey:
      type: object
      description: Auth login creds for auth_type="anonymous"
      properties:
        anonymous_id:
          type: string
    _req_shared_Login_ParamsEmail:
      type: object
      description: Auth login params for auth_type="email"
      properties:
        confirm_password:
          type: string
          description: This should match the `creds` password field when sign_up=true. This should be verified on the client side as well to reduce invalid requests.
        sign_up:
          type: boolean
          default: false
    _req_shared_Login_ParamsOIDC:
      type: object
      description: Auth login params for auth_type="oidc" (or variants)
      properties:
        redirect_uri:
          type: string
        pkce_verifier:
          type: string
    _req_shared_Login_ParamsNone:
      type: object
      description: Auth login request params for unlisted auth_types (None)
      nullable: true
    _req_shared_Login_Device:
      required:
        - type
      type: object
      description: Client device
      properties:
        device_id:
          type: string
        type:
          type: string
          enum:
            - mobile
            - web
            - desktop
            - other
        os:
          type: string
    _req_shared_LoginUrl:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - redirect_uri
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - illinois_oidc
        app_type_identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        redirect_uri:
          type: string
    _req_shared_Refresh:
      required:
        - api_key
        - refresh_token
      type: object
      properties:
        api_key:
          type: string
        refresh_token:
          type: string
    _req_shared_Profile:
      type: object
      properties:
        photo_url:
          type: string
          nullable: true
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        birth_year:
          type: integer
          nullable: true
        address:
          type: string
          nullable: true
        zip_code:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
    _req_shared_ProfileNullable:
      type: object
      nullable: true
      properties:
        photo_url:
          type: string
          nullable: true
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        birth_year:
          type: integer
          nullable: true
        address:
          type: string
          nullable: true
        zip_code:
          type: string
          nullable: true
        state:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
    _req_shared_ParamsSetEmailCredential:
      required:
        - new_password
        - confirm_password
      type: object
      properties:
        new_password:
          type: string
        confirm_password:
          type: string
    _res_shared_LoginUrl:
      required:
        - login_url
      type: object
      properties:
        login_url:
          type: string
        params:
          type: object
          description: Params to be submitted with 'login' request (if necessary)
    _res_shared_Login:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/_res_shared_RokwireToken'
        account:
          $ref: '#/components/schemas/_res_shared_Account'
        params:
          type: object
          nullable: true
          anyOf:
            - type: object
              description: Auth login response params for auth_type="oidc" (or variants)
              properties:
                oidc_token:
                  type: object
                  properties:
                    id_token:
                      type: string
                    access_token:
                      type: string
                    refresh_token:
                      type: string
                    token_type:
                      type: string
                    redirect_uri:
                      type: string
            - type: object
              description: Auth login response params for auth_type="anonymous"
              properties:
                anonymous_id:
                  type: string
            - type: object
              description: Auth login response params for unlisted auth_types (None)
              nullable: true
        message:
          type: string
    _res_shared_Refresh:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/_res_shared_RokwireToken'
        params:
          type: object
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/_res_shared_Login/properties/params/anyOf/0'
            - $ref: '#/components/schemas/_res_shared_Login/properties/params/anyOf/1'
            - $ref: '#/components/schemas/_res_shared_Login/properties/params/anyOf/2'
    _res_shared_Account:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: '#/components/schemas/ProfileFields'
        preferences:
          type: object
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionFields'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgRoleFields'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/AppOrgGroupFields'
        auth_types:
          type: array
          items:
            $ref: '#/components/schemas/AccountAuthTypeFields'
    _res_shared_RokwireToken:
      type: object
      properties:
        access_token:
          description: The user's access token to be provided to authorize access to ROKWIRE APIs
          type: string
        refresh_token:
          description: A refresh token that can be used to get a new access token once the one provided expires
          type: string
        token_type:
          description: The type of the provided tokens to be specified when they are sent in the "Authorization" header
          type: string
          enum:
            - Bearer
    _req_account-exists_Request:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - user_identifier
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - username
            - email
            - twilio_phone
            - illinois_oidc
            - anonymous
        app_type_identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        user_identifier:
          type: string
    _res_account-exists_Response:
      type: boolean
    _req_credential_update_Request:
      required:
        - account_auth_type_id
      type: object
      properties:
        account_auth_type_id:
          type: string
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_req_shared_ParamsSetEmailCredential'
    _req_credential_forgot_initiate_Request:
      required:
        - auth_type
        - app_type_identifier
        - org_id
        - api_key
        - identifier
      type: object
      properties:
        auth_type:
          type: string
          enum:
            - username
            - email
            - twilio_phone
            - illinois_oidc
            - api_key
        app_type_identifier:
          type: string
        org_id:
          type: string
        api_key:
          type: string
        identifier:
          type: string
    _req_credential_forgot_complete_Request:
      required:
        - credential_id
        - reset_code
      type: object
      properties:
        credential_id:
          type: string
        reset_code:
          type: string
        params:
          type: object
          anyOf:
            - $ref: '#/components/schemas/_req_shared_ParamsSetEmailCredential'
    _req_authorize-service_Request:
      required:
        - service_id
      type: object
      properties:
        service_id:
          type: string
        approved_scopes:
          description: Scopes to be granted to this service in this and future tokens. Replaces existing scopes if present.
          type: array
          items:
            type: string
    _res_authorize-service_Response:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          description: The type of the provided tokens to be specified when they are sent in the "Authorization" header
          type: string
          enum:
            - Bearer
        approved_scopes:
          type: array
          items:
            type: string
        service_reg:
          $ref: '#/components/schemas/ServiceReg'
    _req_create-Organization_Request:
      required:
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _res_create_Organization_Response:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _req_update_Organization_Request:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _res_update_Organization_Response:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _req_get_Organization_Request:
      required:
        - id
      properties:
        id:
          readOnly: true
          type: string
    _res_get_Organization_Response:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          $ref: '#/components/schemas/OrganizationConfigFields'
    _res_get_Organizations_Response:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        config:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationConfigFields'
    _req_create_Application_Request:
      required:
        - name
        - multi_tenant
        - requires_own_users
      type: object
      properties:
        name:
          type: string
        multi_tenant:
          type: boolean
        requires_own_users:
          type: boolean
        max_login_session_duration:
          description: The maximum allowed duration (in hours) of a user's login session for this application
          type: integer
        application_types:
          type: array
          items:
            required:
              - identifier
            type: object
            properties:
              identifier:
                type: string
              name:
                type: string
              versions:
                type: array
                items:
                  type: string
    _req_get_Application_Request:
      required:
        - id
      type: string
      properties:
        id:
          readOnly: true
          type: string
    _res_get_Application_Response:
      required:
        - id
        - name
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        multi_tenant:
          type: boolean
        requires_own_users:
          type: boolean
        max_login_session_duration:
          description: The maximum allowed duration (in hours) of a user's login session for this application
          type: integer
        organization:
          $ref: '#/components/schemas/ApplicationOrganization'
        applicationType:
          $ref: '#/components/schemas/ApplicationType'
    _res_get_Applications_Response:
      required:
        - id
        - name
        - multi_tenant
        - requires_own_users
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        multi_tenant:
          type: boolean
        requires_own_users:
          type: boolean
        max_login_session_duration:
          description: The maximum allowed duration (in hours) of a user's login session for this application
          type: integer
        application_types:
          $ref: '#/components/schemas/ApplicationTypeFields'
    _req_permissions_Request:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        service_id:
          type: string
        assigners:
          type: array
          description: permissions that could assign current permission to accounts
          items:
            type: string
    _req_application-roles_Request:
      required:
        - name
        - app_id
        - description
        - permissions
      type: object
      properties:
        name:
          type: string
        app_id:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    _req_account-permissions_Request:
      required:
        - account_id
        - app_id
        - permissions
      type: object
      properties:
        account_id:
          type: string
        app_id:
          type: string
        permissions:
          type: array
          items:
            type: string
    _req_account-roles_Request:
      required:
        - account_id
        - app_id
        - role_ids
      type: object
      properties:
        account_id:
          type: string
        app_id:
          type: string
        role_ids:
          type: array
          items:
            type: string
