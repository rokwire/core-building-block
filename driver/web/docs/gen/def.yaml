openapi: 3.0.3
info:
  title: Rokwire Core Building Block API
  description: Core Building Block API Documentation
  version: 1.0.0
servers:
  - url: 'https://api.rokwire.illinois.edu/core'
    description: Production server
  - url: 'https://api-test.rokwire.illinois.edu/core'
    description: Test server
  - url: 'https://api-dev.rokwire.illinois.edu/core'
    description: Development server
  - url: 'http://localhost/core'
    description: Local server
tags:
  - name: Auth
    description: APIs handling the authentication.
  - name: Common
    description: End users applications APIs.
  - name: Admin
    description: Administration applications APIs.
  - name: Enc
    description: APIs consumed by the Encryption building block.
  - name: BBs
    description: APIs consumed by the platform building blocks.
paths:
  /services/auth/test:
    get:
      tags:
        - Auth
      summary: Test API..
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /services/auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: |
        Login using credentials to retrieve access token, refresh token, and user data
      requestBody:
        description: |
          User credential details and parameters
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthLoginEmail'
                - $ref: '#/components/schemas/AuthLoginPhone'
                - $ref: '#/components/schemas/AuthLoginOidc'
              discriminator:
                propertyName: auth_type
                mapping:
                  email: ../../schemas/auth/AuthLoginEmail.yaml
                  phone: ../../schemas/auth/AuthLoginPhone.yaml
                  oidc: ../../schemas/auth/AuthLoginOidc.yaml
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  params:
                    type: object
                    description: Login params to be submitted with subsequent requests (if necessary)
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/auth/service-regs:
    get:
      tags:
        - Auth
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /services/common/test:
    get:
      tags:
        - Common
      summary: Test API..
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /admin/global-config:
    get:
      tags:
        - Admin
      summary: Get global config
      description: |
        Gives the system global config
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConfig'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Create global config
      description: |
        Creates the system global config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Successfully created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Admin
      summary: Update global config
      description: |
        Updates the system global config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalConfig'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Successfully updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/admin/organizations/{id}':
    put:
      tags:
        - Admin
      summary: Update organization
      description: |
        Updates organization
      parameters:
        - name: id
          in: path
          description: ID of the organization that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: update one organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Successfullly created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/organizations:
    post:
      tags:
        - Admin
      summary: Create organization
      description: |
        Creates organization
      requestBody:
        description: creates one organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Successfullly created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /admin/service-regs:
    get:
      tags:
        - Admin
      summary: Get service registrations
      description: |
        Returns service registration records
      parameters:
        - name: ids
          in: query
          description: A comma-separated list of service IDs to return registrations for
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceReg'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Register service
      description: |
        Creates a new service registration

        The "service_id" of the registration must not match an existing registration  
      requestBody:
        description: service registration record to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReg'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Admin
      summary: Update service registration
      description: |
        Update an existing service registration

        The "service_id" of the registration must match an existing registration
      requestBody:
        description: Service registration record update to be applied
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReg'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - Admin
      summary: Deregister service
      description: |
        Deletes an existing service registration record
      parameters:
        - name: id
          in: query
          description: The service ID of the registration to delete
          required: true
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /enc/test:
    get:
      tags:
        - Enc
      summary: Test API..
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /bbs/test:
    get:
      tags:
        - BBs
      summary: Test API..
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Echooo
  /version:
    get:
      summary: Get service version
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: v1.1.0
components:
  schemas:
    GlobalConfig:
      required:
        - setting
      type: object
      properties:
        setting:
          type: string
    GlobalRole:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
    GlobalGroup:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/GlobalRole'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Organization:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - micro
            - small
            - medium
            - large
            - huge
        requires_own_login:
          type: boolean
        login_types:
          type: array
          items:
            type: string
        config:
          $ref: '#/components/schemas/OrganizationConfig'
    OrganizationConfig:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: organization config id
        domains:
          type: array
          description: organization domains
          items:
            type: string
    OrganizationRole:
      required:
        - id
        - name
        - org_id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        org_id:
          type: string
        permissions:
          type: array
          items:
            type: string
    OrganizationGroup:
      required:
        - id
        - name
        - org_id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        org_id:
          type: string
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationRole'
        org_memberships:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationMembership'
    ServiceReg:
      required:
        - service_id
        - host
      type: object
      properties:
        service_id:
          type: string
        host:
          type: string
        pub_key:
          $ref: '#/components/schemas/PubKey'
    PubKey:
      required:
        - key_pem
        - alg
      type: object
      properties:
        key_pem:
          type: string
        alg:
          type: string
    AuthLoginOidc:
      required:
        - auth_type
        - creds
        - params
      type: object
      properties:
        auth_type:
          type: string
        creds:
          type: string
          description: |
            User credentials
             - Initial login: authorization code
             - Refresh: refresh token
        params:
          required:
            - org_id
            - app_id
          type: object
          properties:
            org_id:
              type: string
            app_id:
              type: string
            pkce_challenge:
              type: string
            redirect_uri:
              type: string
    AuthLoginEmail:
      required:
        - auth_type
        - creds
      type: object
      properties:
        auth_type:
          type: string
        creds:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
        params:
          type: object
          properties:
            new_user:
              type: boolean
              default: false
    AuthLoginPhone:
      required:
        - auth_type
        - creds
      type: object
      properties:
        auth_type:
          type: string
        creds:
          type: object
          required:
            - phone
          properties:
            phone:
              type: string
            code:
              type: string
        params:
          type: object
          properties:
            new_user:
              type: boolean
              default: false
    User:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        account:
          $ref: '#/components/schemas/UserAccount'
        profile:
          $ref: '#/components/schemas/UserProfile'
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/GlobalRole'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GlobalGroup'
        org_memberships:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationMembership'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    UserAccount:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        phone:
          type: string
        username:
          type: string
    UserProfile:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        photo_url:
          type: string
    OrganizationMembership:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        org_id:
          type: string
        org_user_data:
          type: object
          description: 'map[string]object for arbitrary organization user data'
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationRole'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationGroup'
    Device:
      required:
        - id
        - type
        - user_ids
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - mobile
            - web
            - desktop
            - other
        os:
          type: string
        mac_address:
          type: string
        user_ids:
          type: array
          items:
            type: string
